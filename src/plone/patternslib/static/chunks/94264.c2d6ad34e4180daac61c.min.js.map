{"version":3,"file":"chunks/94264.c2d6ad34e4180daac61c.min.js","mappings":"yQAEA,MACMA,EAAgB,YAIhBC,EAAa,cAObC,EAAc,EAAAC,KAAKC,OAAO,CAC5BC,KAAM,cACN,UAAAC,GACI,MAAO,CACHC,aAAc,WACdC,eAAgB,CAAC,EACjBC,WAAW,EACXC,gBAAgB,EAExB,EACAC,MAAO,aACP,OAAAC,GACI,MAAO,GAAGC,KAAKC,QAAQP,eAC3B,EACA,aAAAQ,GACI,MAAO,CACHC,MAAO,CACHC,QAAS,EACTC,UAAWC,GACAA,EAAQC,aAAa,SACtBC,SAASF,EAAQG,aAAa,UAAY,GAAI,IAC9C,GAGdC,KAAM,CACFN,QAAS,KACTC,UAAWC,GAAWA,EAAQG,aAAa,SAGvD,EACA,SAAAJ,GACI,MAAO,CACH,CACIM,IAAK,MAGjB,EACA,UAAAC,EAAW,eAAEjB,IACT,MAAM,MAAEQ,KAAUU,GAA2BlB,EAC7C,OAAiB,IAAVQ,EACD,CAAC,MAAM,IAAAW,iBAAgBd,KAAKC,QAAQN,eAAgBkB,GAAyB,GAC7E,CAAC,MAAM,IAAAC,iBAAgBd,KAAKC,QAAQN,eAAgBA,GAAiB,EAC/E,EACA,WAAAoB,GACI,MAAO,CACHC,kBAAmB,IAAM,EAAGC,WAAUC,WAC9BlB,KAAKC,QAAQJ,eACNqB,IAAQC,WAAWnB,KAAKR,KAAMQ,KAAKC,QAAQP,aAAcM,KAAKC,QAAQL,WAAWwB,iBA3DvF,WA2DsHpB,KAAKqB,OAAOC,cAAcnC,IAAgBoC,MAE9JN,EAASE,WAAWnB,KAAKR,KAAMQ,KAAKC,QAAQP,aAAcM,KAAKC,QAAQL,WAG1F,EACA,oBAAA4B,GACI,MAAO,CACH,cAAe,IAAMxB,KAAKqB,OAAOJ,SAASD,oBAElD,EACA,aAAAS,GACI,IAAIC,GAAY,IAAAC,mBAAkB,CAC9BC,KAAMxC,EACNsB,KAAMV,KAAKU,KACXY,cAAeO,IAAS,CAAG1B,OAAQ0B,EAAM,KACzCC,cAAe,CAACD,EAAOE,IAASA,EAAKC,WAAaD,EAAKE,MAAM9B,SAAW0B,EAAM,KAalF,OAXI7B,KAAKC,QAAQL,WAAaI,KAAKC,QAAQJ,kBACvC6B,GAAY,IAAAC,mBAAkB,CAC1BC,KAAMxC,EACNsB,KAAMV,KAAKU,KACXd,UAAWI,KAAKC,QAAQL,UACxBC,eAAgBG,KAAKC,QAAQJ,eAC7ByB,cAAeO,IAAS,CAAG1B,OAAQ0B,EAAM,MAAO7B,KAAKqB,OAAOC,cAAcnC,KAC1E2C,cAAe,CAACD,EAAOE,IAASA,EAAKC,WAAaD,EAAKE,MAAM9B,SAAW0B,EAAM,GAC9ER,OAAQrB,KAAKqB,UAGd,CACHK,EAER,G","sources":["webpack://@patternslib/patternslib/./node_modules/@tiptap/extension-ordered-list/dist/index.js"],"sourcesContent":["import { Node, mergeAttributes, wrappingInputRule } from '@tiptap/core';\n\nconst ListItemName = 'listItem';\nconst TextStyleName = 'textStyle';\n/**\n * Matches an ordered list to a 1. on input (or any number followed by a dot).\n */\nconst inputRegex = /^(\\d+)\\.\\s$/;\n/**\n * This extension allows you to create ordered lists.\n * This requires the ListItem extension\n * @see https://www.tiptap.dev/api/nodes/ordered-list\n * @see https://www.tiptap.dev/api/nodes/list-item\n */\nconst OrderedList = Node.create({\n    name: 'orderedList',\n    addOptions() {\n        return {\n            itemTypeName: 'listItem',\n            HTMLAttributes: {},\n            keepMarks: false,\n            keepAttributes: false,\n        };\n    },\n    group: 'block list',\n    content() {\n        return `${this.options.itemTypeName}+`;\n    },\n    addAttributes() {\n        return {\n            start: {\n                default: 1,\n                parseHTML: element => {\n                    return element.hasAttribute('start')\n                        ? parseInt(element.getAttribute('start') || '', 10)\n                        : 1;\n                },\n            },\n            type: {\n                default: null,\n                parseHTML: element => element.getAttribute('type'),\n            },\n        };\n    },\n    parseHTML() {\n        return [\n            {\n                tag: 'ol',\n            },\n        ];\n    },\n    renderHTML({ HTMLAttributes }) {\n        const { start, ...attributesWithoutStart } = HTMLAttributes;\n        return start === 1\n            ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0]\n            : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n    },\n    addCommands() {\n        return {\n            toggleOrderedList: () => ({ commands, chain }) => {\n                if (this.options.keepAttributes) {\n                    return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItemName, this.editor.getAttributes(TextStyleName)).run();\n                }\n                return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks);\n            },\n        };\n    },\n    addKeyboardShortcuts() {\n        return {\n            'Mod-Shift-7': () => this.editor.commands.toggleOrderedList(),\n        };\n    },\n    addInputRules() {\n        let inputRule = wrappingInputRule({\n            find: inputRegex,\n            type: this.type,\n            getAttributes: match => ({ start: +match[1] }),\n            joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\n        });\n        if (this.options.keepMarks || this.options.keepAttributes) {\n            inputRule = wrappingInputRule({\n                find: inputRegex,\n                type: this.type,\n                keepMarks: this.options.keepMarks,\n                keepAttributes: this.options.keepAttributes,\n                getAttributes: match => ({ start: +match[1], ...this.editor.getAttributes(TextStyleName) }),\n                joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],\n                editor: this.editor,\n            });\n        }\n        return [\n            inputRule,\n        ];\n    },\n});\n\nexport { OrderedList, OrderedList as default, inputRegex };\n//# sourceMappingURL=index.js.map\n"],"names":["TextStyleName","inputRegex","OrderedList","Node","create","name","addOptions","itemTypeName","HTMLAttributes","keepMarks","keepAttributes","group","content","this","options","addAttributes","start","default","parseHTML","element","hasAttribute","parseInt","getAttribute","type","tag","renderHTML","attributesWithoutStart","mergeAttributes","addCommands","toggleOrderedList","commands","chain","toggleList","updateAttributes","editor","getAttributes","run","addKeyboardShortcuts","addInputRules","inputRule","wrappingInputRule","find","match","joinPredicate","node","childCount","attrs"],"sourceRoot":""}