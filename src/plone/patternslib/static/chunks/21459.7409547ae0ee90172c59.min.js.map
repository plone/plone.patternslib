{"version":3,"file":"chunks/21459.7409547ae0ee90172c59.min.js","mappings":"wQAEA,MACMA,EAAgB,YAIhBC,EAAa,iBAObC,EAAa,EAAAC,KAAKC,OAAO,CAC3BC,KAAM,aACN,UAAAC,GACI,MAAO,CACHC,aAAc,WACdC,eAAgB,CAAC,EACjBC,WAAW,EACXC,gBAAgB,EAExB,EACAC,MAAO,aACP,OAAAC,GACI,MAAO,GAAGC,KAAKC,QAAQP,eAC3B,EACA,SAAAQ,GACI,MAAO,CACH,CAAEC,IAAK,MAEf,EACA,UAAAC,EAAW,eAAET,IACT,MAAO,CAAC,MAAM,IAAAU,iBAAgBL,KAAKC,QAAQN,eAAgBA,GAAiB,EAChF,EACA,WAAAW,GACI,MAAO,CACHC,iBAAkB,IAAM,EAAGC,WAAUC,WAC7BT,KAAKC,QAAQJ,eACNY,IAAQC,WAAWV,KAAKR,KAAMQ,KAAKC,QAAQP,aAAcM,KAAKC,QAAQL,WAAWe,iBAtCvF,WAsCsHX,KAAKY,OAAOC,cAAc1B,IAAgB2B,MAE9JN,EAASE,WAAWV,KAAKR,KAAMQ,KAAKC,QAAQP,aAAcM,KAAKC,QAAQL,WAG1F,EACA,oBAAAmB,GACI,MAAO,CACH,cAAe,IAAMf,KAAKY,OAAOJ,SAASD,mBAElD,EACA,aAAAS,GACI,IAAIC,GAAY,IAAAC,mBAAkB,CAC9BC,KAAM/B,EACNgC,KAAMpB,KAAKoB,OAYf,OAVIpB,KAAKC,QAAQL,WAAaI,KAAKC,QAAQJ,kBACvCoB,GAAY,IAAAC,mBAAkB,CAC1BC,KAAM/B,EACNgC,KAAMpB,KAAKoB,KACXxB,UAAWI,KAAKC,QAAQL,UACxBC,eAAgBG,KAAKC,QAAQJ,eAC7BgB,cAAe,IAAeb,KAAKY,OAAOC,cAAc1B,GACxDyB,OAAQZ,KAAKY,UAGd,CACHK,EAER,G","sources":["webpack://@patternslib/patternslib/./node_modules/@tiptap/extension-bullet-list/dist/index.js"],"sourcesContent":["import { Node, mergeAttributes, wrappingInputRule } from '@tiptap/core';\n\nconst ListItemName = 'listItem';\nconst TextStyleName = 'textStyle';\n/**\n * Matches a bullet list to a dash or asterisk.\n */\nconst inputRegex = /^\\s*([-+*])\\s$/;\n/**\n * This extension allows you to create bullet lists.\n * This requires the ListItem extension\n * @see https://tiptap.dev/api/nodes/bullet-list\n * @see https://tiptap.dev/api/nodes/list-item.\n */\nconst BulletList = Node.create({\n    name: 'bulletList',\n    addOptions() {\n        return {\n            itemTypeName: 'listItem',\n            HTMLAttributes: {},\n            keepMarks: false,\n            keepAttributes: false,\n        };\n    },\n    group: 'block list',\n    content() {\n        return `${this.options.itemTypeName}+`;\n    },\n    parseHTML() {\n        return [\n            { tag: 'ul' },\n        ];\n    },\n    renderHTML({ HTMLAttributes }) {\n        return ['ul', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n    },\n    addCommands() {\n        return {\n            toggleBulletList: () => ({ commands, chain }) => {\n                if (this.options.keepAttributes) {\n                    return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItemName, this.editor.getAttributes(TextStyleName)).run();\n                }\n                return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks);\n            },\n        };\n    },\n    addKeyboardShortcuts() {\n        return {\n            'Mod-Shift-8': () => this.editor.commands.toggleBulletList(),\n        };\n    },\n    addInputRules() {\n        let inputRule = wrappingInputRule({\n            find: inputRegex,\n            type: this.type,\n        });\n        if (this.options.keepMarks || this.options.keepAttributes) {\n            inputRule = wrappingInputRule({\n                find: inputRegex,\n                type: this.type,\n                keepMarks: this.options.keepMarks,\n                keepAttributes: this.options.keepAttributes,\n                getAttributes: () => { return this.editor.getAttributes(TextStyleName); },\n                editor: this.editor,\n            });\n        }\n        return [\n            inputRule,\n        ];\n    },\n});\n\nexport { BulletList, BulletList as default, inputRegex };\n//# sourceMappingURL=index.js.map\n"],"names":["TextStyleName","inputRegex","BulletList","Node","create","name","addOptions","itemTypeName","HTMLAttributes","keepMarks","keepAttributes","group","content","this","options","parseHTML","tag","renderHTML","mergeAttributes","addCommands","toggleBulletList","commands","chain","toggleList","updateAttributes","editor","getAttributes","run","addKeyboardShortcuts","addInputRules","inputRule","wrappingInputRule","find","type"],"sourceRoot":""}