{"version":3,"file":"chunks/52402.2bad00b0b377b84f01b8.min.js","mappings":"0iBAOO,MAAMA,EAEL,KAFKA,EAIH,KCLH,MAAMC,EAIT,QAAIC,GAIA,OAHKC,KAAKC,OAASD,KAAKE,eACpBF,KAAKC,OAAQ,IAAIE,aAAcC,OAAOJ,KAAKK,cAExCL,KAAKC,OAAS,EACzB,CAIA,cAAIK,GAKA,OAJKN,KAAKK,aAAgBL,KAAKE,eAC3BF,KAAKK,aAAc,IAAIE,aAAcC,OAAOR,KAAKC,QAG9CD,KAAKK,WAChB,CAMA,WAAAI,CAAYC,GACR,MAAM,QAAEC,EAAO,QAAEC,EAAO,KAAEb,EAAI,WAAEO,EAAU,mBAAEO,EAAkB,wBAAEC,GAA6BJ,EAC7FV,KAAKW,QAAUA,EACfX,KAAKY,QAAUG,OAAOC,OAAO,CAAC,EAAGJ,GAAW,CAAC,GACzCN,GACAN,KAAKK,YAAcC,EACnBN,KAAKE,cAAe,IAGpBF,KAAKC,MAAQF,GAAQ,GACrBC,KAAKE,cAAe,GAExBF,KAAKa,mBAAqBA,IAAsB,EAChDb,KAAKc,wBAA0BA,IAA2B,CAC9D,CAMA,mBAAOG,CAAaC,EAAUL,GAC1B,MAAMD,EAAU,CAAC,EACXO,EAAQC,GAAQA,EAAIC,QAAQ,aAAc,IAEhD,IAAK,MAAMC,KAAUJ,EAASN,QAAQW,UAAW,CACjCD,EAAOE,QAAQ,KAA3B,MACMC,EAAMN,EAAKG,EAAO,IACxB,IAAII,EAAQP,EAAKG,EAAO,IACpBT,GACqB,YAArBK,EAASP,SACY,cAArBO,EAASP,UACTe,EAAQ5B,EAAU6B,iBAAiBD,IAEvCd,EAAQa,GAAOC,CACnB,CACA,OAAO,IAAI5B,EAAU,CACjBa,QAASO,EAASP,QAClBC,UACAN,WAAYY,EAASZ,WACrBO,sBAER,CAIA,QAAAe,GACI,OAAO5B,KAAK6B,wBAChB,CAQA,SAAAC,GACI,MAAMC,EAAgB/B,KAAK6B,yBAC3B,OAAI7B,KAAKE,aACEJ,EAAUkC,aAAaD,EAAe/B,KAAKK,aAAa4B,OAGxDF,EAAgB/B,KAAKC,MAAQJ,CAE5C,CACA,sBAAAgC,GACI,MAAMK,EAAQ,CAAClC,KAAKW,SAChBX,KAAKc,gCACEd,KAAKY,QAAQ,kBAExB,IAAK,MAAMuB,KAAQpB,OAAOqB,KAAKpC,KAAKY,SAAW,CAAC,GAAI,CAChD,MAAMc,EAAQ1B,KAAKY,QAAQuB,GACvBnC,KAAKa,oBACY,YAAjBb,KAAKW,SACY,cAAjBX,KAAKW,QACLuB,EAAMG,KAAK,GAAGF,KAAQrC,EAAUwC,eAAe,GAAGZ,QAGlDQ,EAAMG,KAAK,GAAGF,KAAQT,IAE9B,CAKA,OAJI1B,KAAKE,eACHF,KAAKuC,gBAAkBvC,KAAKc,0BAC9BoB,EAAMG,KAAK,kBAAkBrC,KAAKwC,gBAE/BN,EAAMO,KAAK5C,GAAWA,EAAUA,CAC3C,CACA,WAAA0C,GACI,OAA6B,IAAtBvC,KAAKwC,YAChB,CACA,UAAAA,GACI,MAAMlC,EAAaN,KAAKM,WACxB,OAAOA,EAAaA,EAAWoC,OAAS,CAC5C,CAKA,iBAAOC,CAAWC,GACd,OAAOA,GAAI,IAAIrC,aAAcC,OAAOoC,GAAGF,OAAS,CACpD,CACA,mBAAOV,CAAaD,EAAezB,GAC/B,MAAMuC,GAAqB,IAAItC,aAAcC,OAAOuB,GAC9Ce,EAAiB,IAAIC,WAAW,CAAC,IACjCC,EAAa,IAAID,WAAWF,EAAmBH,OAASpC,EAAWoC,OAASI,EAAeJ,QAIjG,OAHAM,EAAWC,IAAIJ,GACfG,EAAWC,IAAI3C,EAAYuC,EAAmBH,QAC9CM,EAAWC,IAAIH,EAAgBD,EAAmBH,OAASpC,EAAWoC,QAC/DM,CACX,CAMA,eAAOE,CAASxC,GAEZ,OADc,IAAIZ,EAAUY,GACfoB,WACjB,CAIA,qBAAOQ,CAAelB,GAClB,OAAOA,EACFC,QAAQ,MAAO,QACfA,QAAQ,MAAO,OACfA,QAAQ,MAAO,OACfA,QAAQ,KAAM,MACvB,CAIA,uBAAOM,CAAiBP,GACpB,OAAOA,EACFC,QAAQ,OAAQ,MAChBA,QAAQ,OAAQ,MAChBA,QAAQ,OAAQ,KAChBA,QAAQ,QAAS,KAC1B,EC9GG,MAAM8B,EACT,WAAA1C,CAAY2C,EAASC,GACjBrD,KAAKoD,QAAUA,EACfpD,KAAKqD,eAAiBA,EACtBrD,KAAKsD,SAAW,IAAI/C,YACpBP,KAAKuD,SAAW,IAAIpD,YACpBH,KAAKwD,OAAS,GACdxD,KAAKyD,YACT,CACA,UAAAC,CAAWC,EAASC,GAA8B,GAC9C,IAAIC,EAWJ,GATIA,EADmB,iBAAZF,EACC3D,KAAKsD,SAAS9C,OAAOmD,GAGrB,IAAIZ,WAAWY,GAMvBC,GAA2D,IAA5BC,EAAMA,EAAMnB,OAAS,GAAU,CAC9D,MAAMoB,EAAgB,IAAIf,WAAWc,EAAMnB,OAAS,GACpDoB,EAAcb,IAAIY,EAAO,GACzBC,EAAcD,EAAMnB,QAAU,EAC9BmB,EAAQC,CACZ,CAEA,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAMnB,OAAQqB,IAAK,CACnC,MAAMC,EAAOH,EAAME,GACnB/D,KAAKiE,QAAQD,EACjB,CACJ,CAGA,aAAAE,CAAcF,GA1FL,IA2FDA,GAnFD,KAuFCA,IA3FD,KA+FCA,GAKJhE,KAAKiE,QAAUjE,KAAKmE,gBACpBnE,KAAKoE,cAAcJ,IAJfhE,KAAKqD,iBAKb,CACA,eAAAc,CAAgBH,GACZ,GApGG,KAoGCA,EAIJ,OA5GG,KA4GCA,GACAhE,KAAKqE,SAAS1D,QAAUX,KAAKsE,2BAC7BtE,KAAKiE,QAAUjE,KAAKuE,uBAGxBvE,KAAKwE,aAAaR,EACtB,CACA,eAAAO,CAAgBP,GA/GT,KAgHCA,IApHD,KAwHCA,GAIJhE,KAAKiE,QAAUjE,KAAKyE,kBACpBzE,KAAKoE,cAAcJ,IAJfhE,KAAK0E,oBAKb,CACA,aAAAN,CAAcJ,GACVhE,KAAKiE,QAAQD,EACjB,CACA,iBAAAS,CAAkBT,GACd,GA3HM,KA2HFA,EAGA,OAFAhE,KAAK2E,WAAa3E,KAAKsE,2BACvBtE,KAAKiE,QAAUjE,KAAK4E,qBAGxB5E,KAAKwE,aAAaR,EACtB,CACA,mBAAAY,CAAoBZ,GAChB,GAvIG,KAuICA,EAIJ,OA/IG,KA+ICA,GACAhE,KAAKqE,SAASzD,QAAQyB,KAAK,CACvBrC,KAAK2E,WACL3E,KAAKsE,wBAETtE,KAAK2E,gBAAaE,OAClB7E,KAAKiE,QAAUjE,KAAKuE,uBAGxBvE,KAAKwE,aAAaR,EACtB,CACA,iBAAAU,GACI,MAAMI,EAAsB9E,KAAKqE,SAASzD,QAAQmE,QAAQzD,GACjC,mBAAdA,EAAO,KACf,GACCwD,GACA9E,KAAKgF,oBAAsBC,SAASH,EAAoB,GAAI,IAC5D9E,KAAKiE,QAAUjE,KAAKkF,uBAGpBlF,KAAKiE,QAAUjE,KAAKmF,0BAE5B,CACA,0BAAAA,CAA2BnB,GA1KlB,IA2KDA,EAIJhE,KAAKwE,aAAaR,GAHdhE,KAAKoF,gBAIb,CACA,qBAAAF,CAAsBlB,GAEiB,GAA/BhE,KAAKgF,sBAIThF,KAAKwE,aAAaR,GAHdhE,KAAKoF,gBAIb,CACA,cAAAA,GACIpF,KAAKqE,SAAS/D,WAAaN,KAAKqF,qBAChC,IACIrF,KAAKoD,QAAQpD,KAAKqE,SACtB,CACA,MAAOiB,GACHC,QAAQC,IAAI,wEAAyEF,EACzF,CACAtF,KAAKyD,YACT,CAEA,YAAAe,CAAaR,GACThE,KAAKwD,OAAOnB,KAAK2B,EACrB,CACA,mBAAAM,GACI,OAAOtE,KAAKuD,SAASnD,OAAOJ,KAAKqF,qBACrC,CACA,kBAAAA,GACI,MAAMI,EAAY,IAAI1C,WAAW/C,KAAKwD,QAEtC,OADAxD,KAAKwD,OAAS,GACPiC,CACX,CACA,UAAAhC,GACIzD,KAAKqE,SAAW,CACZ1D,aAASkE,EACTjE,QAAS,GACTN,gBAAYuE,GAEhB7E,KAAKwD,OAAS,GACdxD,KAAK2E,gBAAaE,EAClB7E,KAAKiE,QAAUjE,KAAKkE,aACxB,ECxNG,IAAIwB,EAUAC,EASAC,EAQAC,GA1BX,SAAWH,GACPA,EAAiBA,EAA6B,WAAI,GAAK,aACvDA,EAAiBA,EAAuB,KAAI,GAAK,OACjDA,EAAiBA,EAA0B,QAAI,GAAK,UACpDA,EAAiBA,EAAyB,OAAI,GAAK,QACtD,CALD,CAKGA,IAAqBA,EAAmB,CAAC,IAK5C,SAAWC,GACPA,EAAgBA,EAAwB,OAAI,GAAK,SACjDA,EAAgBA,EAA8B,aAAI,GAAK,eACvDA,EAAgBA,EAA0B,SAAI,GAAK,UACtD,CAJD,CAIGA,IAAoBA,EAAkB,CAAC,IAK1C,SAAWC,GACPA,EAAqBA,EAA6B,OAAI,GAAK,SAC3DA,EAAqBA,EAAkC,YAAI,GAAK,aACnE,CAHD,CAGGA,IAAyBA,EAAuB,CAAC,IAKpD,SAAWC,GACPA,EAAyB,SAAI,WAC7BA,EAAuB,OAAI,QAC9B,CAHD,CAGGA,IAAmBA,EAAiB,CAAC,ICjCjC,MAAMC,EACT,WAAArF,CAAYsF,EAAWC,EAAYH,EAAeI,SAAUC,GACxDlG,KAAK+F,UAAYA,EACjB/F,KAAKgG,UAAYA,EACjBhG,KAAKkG,OAASA,EACdlG,KAAKmG,cAAgB,8HAIpBnG,KAAK+F,iBAEV,CACA,KAAAK,CAAMC,GACFrG,KAAKsG,OACDtG,KAAKuG,kBACLvG,KAAKwG,UAAUH,GAGfrG,KAAKyG,YAAYJ,EAEzB,CACA,IAAAC,GACItG,KAAK0G,gBACL1G,KAAK2G,iBACT,CACA,eAAAJ,GACI,MAA2B,oBAAb,QAA4BvG,KAAKgG,YAAcH,EAAee,MAChF,CACA,SAAAJ,CAAUH,GACNrG,KAAKkG,OAAO,sCACPlG,KAAK6G,UACN7G,KAAK6G,QAAU,IAAID,OAAOE,IAAIC,gBAAgB,IAAIC,KAAK,CAAChH,KAAKmG,eAAgB,CAAEc,KAAM,sBACrFjH,KAAK6G,QAAQK,UAAaC,GAAYd,EAAKc,EAAQC,MAE3D,CACA,WAAAX,CAAYJ,GAER,GADArG,KAAKkG,OAAO,yCACPlG,KAAKqH,OAAQ,CACd,MAAMC,EAAYC,KAAKC,MACvBxH,KAAKqH,OAASI,aAAY,KACtBpB,EAAKkB,KAAKC,MAAQF,EAAU,GAC7BtH,KAAK+F,UACZ,CACJ,CACA,aAAAW,GACQ1G,KAAK6G,UACL7G,KAAK6G,QAAQa,mBACN1H,KAAK6G,QACZ7G,KAAKkG,OAAO,+BAEpB,CACA,eAAAS,GACQ3G,KAAKqH,SACLM,cAAc3H,KAAKqH,eACZrH,KAAKqH,OACZrH,KAAKkG,OAAO,iCAEpB,ECrDG,MAAM0B,EAOT,WAAAnH,CAAYoH,GACR7H,KAAK6H,SAAWA,CACpB,CAIA,iBAAAC,GACI,OAAO9H,KAAK6H,SAASpF,KAAK,IAC9B,CAIA,gBAAAsF,GACI,OAAO/H,KAAK6H,SAASG,KAAIC,GAAK,IAAIA,EAAE5G,QAAQ,IAAK,aACrD,EAKJuG,EAASM,KAAO,MAIhBN,EAASO,KAAO,MAIhBP,EAASQ,KAAO,MAIhBR,EAASS,QAAU,IAAIT,EAAS,CAC5BA,EAASQ,KACTR,EAASO,KACTP,EAASM,OChCN,MAAMI,EACT,oBAAIC,GACA,OAAOvI,KAAKwI,iBAChB,CACA,aAAIC,GACA,OAAOzI,KAAK0I,UAChB,CACA,WAAAjI,CAAYkI,EAASC,EAAYC,GAC7B7I,KAAK2I,QAAUA,EACf3I,KAAK4I,WAAaA,EAClB5I,KAAK0I,YAAa,EAClB1I,KAAK8I,qBAAuB,CAExBC,UAAWC,IACPhJ,KAAKiJ,MAAM,uBAAuBD,EAAMpI,QAAQsI,UAChDlJ,KAAK0I,YAAa,EAClB1I,KAAKwI,kBAAoBQ,EAAMpI,QAAQuI,QAEnCnJ,KAAKwI,oBAAsBZ,EAASQ,OACpCpI,KAAKoJ,qBAAsB,GAE/BpJ,KAAKqJ,gBAAgBL,EAAMpI,SAC3BZ,KAAKsJ,UAAUN,EAAM,EAGzBO,QAASP,IAQL,MAAMQ,EAAeR,EAAMpI,QAAQ4I,aAC7BC,EAAYzJ,KAAK0J,eAAeF,IAAiBxJ,KAAK2J,mBAEtDxC,EAAU6B,EACVY,EAAS5J,KACT6J,EAAY7J,KAAKwI,oBAAsBZ,EAASQ,KAChDjB,EAAQvG,QAAQkJ,IAChB3C,EAAQvG,QAAQ,cAGtBuG,EAAQ2C,IAAM,CAAClJ,EAAU,CAAC,IACfgJ,EAAOE,IAAID,EAAWL,EAAc5I,GAE/CuG,EAAQ4C,KAAO,CAACnJ,EAAU,CAAC,IAChBgJ,EAAOG,KAAKF,EAAWL,EAAc5I,GAEhD6I,EAAUtC,EAAQ,EAGtB6C,QAAShB,IACL,MAAMiB,EAAWjK,KAAKkK,iBAAiBlB,EAAMpI,QAAQ,eACjDqJ,GACAA,EAASjB,UAEFhJ,KAAKkK,iBAAiBlB,EAAMpI,QAAQ,gBAG3CZ,KAAKmK,mBAAmBnB,EAC5B,EAGJoB,MAAOpB,IACHhJ,KAAKqK,aAAarB,EAAM,GAIhChJ,KAAKsK,SAAW,EAEhBtK,KAAK0J,eAAiB,CAAC,EAEvB1J,KAAKkK,iBAAmB,CAAC,EACzBlK,KAAKuK,aAAe,GACpBvK,KAAKoJ,qBAAsB,EAC3BpJ,KAAKwK,sBAAwBjD,KAAKC,MAClCxH,KAAKiJ,MAAQJ,EAAOI,MACpBjJ,KAAKyK,cAAgB5B,EAAO4B,cAC5BzK,KAAK0K,eAAiB7B,EAAO6B,eAC7B1K,KAAK2K,kBAAoB9B,EAAO8B,kBAChC3K,KAAK4K,kBAAoB/B,EAAO+B,kBAChC5K,KAAK6K,kBAAoBhC,EAAOgC,kBAChC7K,KAAK8K,iBAAmBjC,EAAOiC,iBAC/B9K,KAAK+K,sBAAwBlC,EAAOkC,sBACpC/K,KAAKgL,oBAAsBnC,EAAOmC,oBAClChL,KAAKiL,oBAAsBpC,EAAOoC,oBAClCjL,KAAK4D,4BAA8BiF,EAAOjF,4BAC1C5D,KAAKkL,8BAAgCrC,EAAOqC,8BAC5ClL,KAAKsJ,UAAYT,EAAOS,UACxBtJ,KAAKmL,aAAetC,EAAOsC,aAC3BnL,KAAKqK,aAAexB,EAAOwB,aAC3BrK,KAAKoL,iBAAmBvC,EAAOuC,iBAC/BpL,KAAKqL,iBAAmBxC,EAAOwC,iBAC/BrL,KAAK2J,mBAAqBd,EAAOc,mBACjC3J,KAAKmK,mBAAqBtB,EAAOsB,mBACjCnK,KAAKsL,iBAAmBzC,EAAOyC,gBACnC,CACA,KAAAlF,GACI,MAAMmF,EAAS,IAAIpI,GAEnBjC,IACI,MAAM8H,EAAQlJ,EAAUmB,aAAaC,EAAUlB,KAAKoJ,qBAE/CpJ,KAAKiL,qBACNjL,KAAKiJ,MAAM,OAAOD,MAEKhJ,KAAK8I,qBAAqBE,EAAMrI,UAAYX,KAAKsL,kBACzDtC,EAAM,IAG7B,KACIhJ,KAAKiJ,MAAM,WAAW,IAE1BjJ,KAAK4I,WAAW1B,UAAasE,IAGzB,GAFAxL,KAAKiJ,MAAM,iBACXjJ,KAAKwK,sBAAwBjD,KAAKC,MAC9BxH,KAAKiL,oBAAqB,CAC1B,MAAMQ,EAAmBD,EAAIpE,gBAAgBsE,aACvC,IAAIvL,aAAcC,OAAOoL,EAAIpE,MAC7BoE,EAAIpE,KACVpH,KAAKiJ,MAAM,OAAOwC,IACtB,CACAF,EAAO7H,WAAW8H,EAAIpE,KAAMpH,KAAK4D,4BAA4B,EAEjE5D,KAAK4I,WAAW+C,QAAWC,IACvB5L,KAAKiJ,MAAM,wBAAwBjJ,KAAK4I,WAAWiD,OACnD7L,KAAK8L,WACL9L,KAAKoL,iBAAiBQ,EAAW,EAErC5L,KAAK4I,WAAWmD,QAAWC,IACvBhM,KAAKqL,iBAAiBW,EAAW,EAErChM,KAAK4I,WAAWqD,OAAS,KAErB,MAAMvB,EAAiB3J,OAAOC,OAAO,CAAC,EAAGhB,KAAK0K,gBAC9C1K,KAAKiJ,MAAM,wBACXyB,EAAe,kBAAoB1K,KAAKyK,cAAc3C,oBACtD4C,EAAe,cAAgB,CAC3B1K,KAAK6K,kBACL7K,KAAK4K,mBACPnI,KAAK,KACPzC,KAAKkM,UAAU,CAAEvL,QAAS,UAAWC,QAAS8J,GAAiB,CAEvE,CACA,eAAArB,CAAgBzI,GACZ,GAAIA,EAAQuI,UAAYvB,EAASO,MAC7BvH,EAAQuI,UAAYvB,EAASQ,KAC7B,OAIJ,IAAKxH,EAAQ,cACT,OAKJ,MAAOuL,EAAgBC,GAAkBxL,EAAQ,cAC5CyL,MAAM,KACNrE,KAAKsE,GAAMrH,SAASqH,EAAG,MAC5B,GAA+B,IAA3BtM,KAAK6K,mBAA8C,IAAnBuB,EAAsB,CACtD,MAAMG,EAAMC,KAAKC,IAAIzM,KAAK6K,kBAAmBuB,GAC7CpM,KAAKiJ,MAAM,mBAAmBsD,OAC9BvM,KAAK0M,QAAU,IAAI5G,EAAOyG,EAAKvM,KAAK2I,QAAQgE,kBAAmB3M,KAAKiJ,OACpEjJ,KAAK0M,QAAQtG,OAAM,KACXpG,KAAK4I,WAAWgE,aAAelH,EAAiBmH,OAChD7M,KAAK4I,WAAWkE,KAAKjN,GACrBG,KAAKiJ,MAAM,YACf,GAER,CACA,GAA+B,IAA3BjJ,KAAK4K,mBAA8C,IAAnBuB,EAAsB,CACtD,MAAMI,EAAMC,KAAKC,IAAIzM,KAAK4K,kBAAmBuB,GAC7CnM,KAAKiJ,MAAM,oBAAoBsD,OAC/BvM,KAAK+M,QAAUtF,aAAY,KACvB,MAAMuF,EAAQzF,KAAKC,MAAQxH,KAAKwK,sBAE5BwC,EAAc,EAANT,IACRvM,KAAKiJ,MAAM,gDAAgD+D,OAC3DhN,KAAKiN,2BACT,GACDV,EACP,CACJ,CACA,wBAAAU,GACQjN,KAAKkL,+BACLlL,KAAKiJ,MAAM,sEACXjJ,KAAKkN,qBAGLlN,KAAKiJ,MAAM,kCACXjJ,KAAKmN,kBAEb,CACA,eAAAC,GACQpN,KAAK4I,aACD5I,KAAK4I,WAAWgE,aAAelH,EAAiB2H,YAChDrN,KAAK4I,WAAWgE,aAAelH,EAAiBmH,MAChD7M,KAAKiN,2BAGjB,CACA,eAAAE,GACInN,KAAK4I,WAAW1B,UAAY,OAC5BlH,KAAK4I,WAAW0E,OACpB,CACA,gBAAAJ,GC1NG,IAA0BK,EAAWtE,ED2NK,mBAA9BjJ,KAAK4I,WAAWlB,YC3NF6F,ED4NJvN,KAAK4I,WC5NUK,ED4NGuE,GAAQxN,KAAKiJ,MAAMuE,GC3N9DD,EAAU7F,UAAY,WAClB,MAAM+F,EAAO,OAEbzN,KAAK+L,QAAU0B,EACfzN,KAAKkH,UAAYuG,EACjBzN,KAAKiM,OAASwB,EACd,MAAMC,EAAK,IAAInG,KACToG,EAAKnB,KAAKoB,SAAShM,WAAWiM,UAAU,EAAG,GAC3CC,EAAc9N,KAAK2L,QAEzB3L,KAAK2L,QAAUC,IACX,MAAMmC,GAAQ,IAAIxG,MAAOyG,UAAYN,EAAGM,UACxC/E,EAAM,sBAAsB0E,oBAAqBI,0BAA8BnC,EAAWqC,QAAQrC,EAAWsC,SAAS,EAE1HlO,KAAKsN,QACLQ,GAAaK,KAAKZ,EAAW,CACzBU,KAAM,KACNC,OAAQ,6BAA6BP,gDACrCS,UAAU,GAElB,GD0MIpO,KAAK4I,WAAWlB,WACpB,CACA,SAAAwE,CAAUxL,GACN,MAAM,QAAEC,EAAO,QAAEC,EAAO,KAAEb,EAAI,WAAEO,EAAU,wBAAEQ,GAA4BJ,EAClEsI,EAAQ,IAAIlJ,EAAU,CACxBa,UACAC,UACAb,OACAO,aACAO,mBAAoBb,KAAKoJ,oBACzBtI,4BAEJ,IAAIuN,EAAWrF,EAAMlH,YAUrB,GATI9B,KAAKiL,oBACLjL,KAAKiJ,MAAM,OAAOoF,KAGlBrO,KAAKiJ,MAAM,OAAOD,KAElBhJ,KAAKgL,qBAA2C,iBAAbqD,IACnCA,GAAW,IAAI9N,aAAcC,OAAO6N,IAEhB,iBAAbA,GAA0BrO,KAAK8K,iBAGrC,CACD,IAAIwD,EAAMD,EACV,KAAOC,EAAI5L,OAAS,GAAG,CACnB,MAAMmB,EAAQyK,EAAIT,UAAU,EAAG7N,KAAK+K,uBACpCuD,EAAMA,EAAIT,UAAU7N,KAAK+K,uBACzB/K,KAAK4I,WAAWkE,KAAKjJ,GACrB7D,KAAKiJ,MAAM,gBAAgBpF,EAAMnB,uBAAuB4L,EAAI5L,SAChE,CACJ,MAVI1C,KAAK4I,WAAWkE,KAAKuB,EAW7B,CACA,OAAAE,GACI,GAAIvO,KAAKyI,UACL,IAEI,MAAMkC,EAAoB5J,OAAOC,OAAO,CAAC,EAAGhB,KAAK2K,mBAC5CA,EAAkB6D,UACnB7D,EAAkB6D,QAAU,SAASxO,KAAKsK,YAE9CtK,KAAKyO,gBAAgB9D,EAAkB6D,SAASxF,IAC5ChJ,KAAKmN,kBACLnN,KAAK8L,WACL9L,KAAKmL,aAAanC,EAAM,IAE5BhJ,KAAKkM,UAAU,CAAEvL,QAAS,aAAcC,QAAS+J,GACrD,CACA,MAAO+D,GACH1O,KAAKiJ,MAAM,oCAAoCyF,IACnD,MAGI1O,KAAK4I,WAAWgE,aAAelH,EAAiB2H,YAChDrN,KAAK4I,WAAWgE,aAAelH,EAAiBmH,MAChD7M,KAAKmN,iBAGjB,CACA,QAAArB,GACI9L,KAAK0I,YAAa,EACd1I,KAAK0M,UACL1M,KAAK0M,QAAQpG,OACbtG,KAAK0M,aAAU7H,GAEf7E,KAAK+M,UACLpF,cAAc3H,KAAK+M,SACnB/M,KAAK+M,aAAUlI,EAEvB,CACA,OAAA8J,CAAQjO,GACJ,MAAM,YAAEkO,EAAW,QAAEhO,EAAO,KAAEb,EAAI,WAAEO,EAAU,wBAAEQ,GAA4BJ,EACtEmO,EAAO9N,OAAOC,OAAO,CAAE4N,eAAehO,GAC5CZ,KAAKkM,UAAU,CACXvL,QAAS,OACTC,QAASiO,EACT9O,OACAO,aACAQ,2BAER,CACA,eAAA2N,CAAgBK,EAAW7E,GACvBjK,KAAKkK,iBAAiB4E,GAAa7E,CACvC,CACA,SAAA8E,CAAUH,EAAa3E,EAAUrJ,EAAU,CAAC,IACxCA,EAAUG,OAAOC,OAAO,CAAC,EAAGJ,IACf+M,KACT/M,EAAQ+M,GAAK,OAAO3N,KAAKsK,YAE7B1J,EAAQgO,YAAcA,EACtB5O,KAAK0J,eAAe9I,EAAQ+M,IAAM1D,EAClCjK,KAAKkM,UAAU,CAAEvL,QAAS,YAAaC,YACvC,MAAMgJ,EAAS5J,KACf,MAAO,CACH2N,GAAI/M,EAAQ+M,GACZ,WAAAqB,CAAYH,GACR,OAAOjF,EAAOoF,YAAYpO,EAAQ+M,GAAIkB,EAC1C,EAER,CACA,WAAAG,CAAYrB,EAAI/M,EAAU,CAAC,GACvBA,EAAUG,OAAOC,OAAO,CAAC,EAAGJ,UACrBZ,KAAK0J,eAAeiE,GAC3B/M,EAAQ+M,GAAKA,EACb3N,KAAKkM,UAAU,CAAEvL,QAAS,cAAeC,WAC7C,CACA,KAAAqO,CAAMC,GACF,MAAMC,EAAOD,GAAiB,MAAMlP,KAAKsK,WACzCtK,KAAKkM,UAAU,CACXvL,QAAS,QACTC,QAAS,CACLwO,YAAaD,KAGrB,MAAMvF,EAAS5J,KACf,MAAO,CACH2N,GAAIwB,EACJ,MAAAE,GACIzF,EAAOyF,OAAOF,EAClB,EACA,KAAAG,GACI1F,EAAO0F,MAAMH,EACjB,EAER,CACA,MAAAE,CAAOH,GACHlP,KAAKkM,UAAU,CACXvL,QAAS,SACTC,QAAS,CACLwO,YAAaF,IAGzB,CACA,KAAAI,CAAMJ,GACFlP,KAAKkM,UAAU,CACXvL,QAAS,QACTC,QAAS,CACLwO,YAAaF,IAGzB,CACA,GAAApF,CAAID,EAAW0F,EAAgB3O,EAAU,CAAC,GACtCA,EAAUG,OAAOC,OAAO,CAAC,EAAGJ,GACxBZ,KAAKwI,oBAAsBZ,EAASQ,KACpCxH,EAAQ+M,GAAK9D,EAGbjJ,EAAQ,cAAgBiJ,EAE5BjJ,EAAQ4I,aAAe+F,EACvBvP,KAAKkM,UAAU,CAAEvL,QAAS,MAAOC,WACrC,CACA,IAAAmJ,CAAKF,EAAW0F,EAAgB3O,EAAU,CAAC,GASvC,OARAA,EAAUG,OAAOC,OAAO,CAAC,EAAGJ,GACxBZ,KAAKwI,oBAAsBZ,EAASQ,KACpCxH,EAAQ+M,GAAK9D,EAGbjJ,EAAQ,cAAgBiJ,EAE5BjJ,EAAQ4I,aAAe+F,EAChBvP,KAAKkM,UAAU,CAAEvL,QAAS,OAAQC,WAC7C,EE9XG,MAAM4O,EAIT,aAAIjC,GACA,OAAOvN,KAAKyP,eAAe7G,UAC/B,CAIA,qBAAI+B,GACA,OAAO3K,KAAK0P,kBAChB,CACA,qBAAI/E,CAAkBjJ,GAClB1B,KAAK0P,mBAAqBhO,EACtB1B,KAAKyP,gBACLzP,KAAKyP,cAAc9E,kBAAoB3K,KAAK0P,mBAEpD,CAIA,aAAIjH,GACA,QAASzI,KAAKyP,eAAiBzP,KAAKyP,cAAchH,SACtD,CAIA,oBAAIF,GACA,OAAOvI,KAAKyP,cAAgBzP,KAAKyP,cAAclH,sBAAmB1D,CACtE,CAIA,UAAI8K,GACA,OAAO3P,KAAK4P,QAAUjK,EAAgBkK,MAC1C,CACA,YAAAC,CAAaF,GACT5P,KAAK4P,MAAQA,EACb5P,KAAK+P,cAAcH,EACvB,CAIA,WAAAnP,CAAYuP,EAAO,CAAC,GAUhBhQ,KAAKyK,cAAgB7C,EAASS,QAK9BrI,KAAKiQ,kBAAoB,EAIzBjQ,KAAKkQ,eAAiB,IAKtBlQ,KAAKmQ,oBAAsB,EAM3BnQ,KAAKoQ,kBAAoB,IAazBpQ,KAAKqQ,kBAAoBzK,EAAqB0K,OAI9CtQ,KAAK4K,kBAAoB,IAIzB5K,KAAK6K,kBAAoB,IAgBzB7K,KAAK2M,kBAAoB9G,EAAeI,SAcxCjG,KAAK8K,kBAAmB,EAKxB9K,KAAK+K,sBAAwB,KAS7B/K,KAAKgL,qBAAsB,EAW3BhL,KAAK4D,6BAA8B,EASnC5D,KAAKkL,+BAAgC,EAOrClL,KAAK4P,MAAQjK,EAAgB4K,SAE7B,MAAM9C,EAAO,OACbzN,KAAKiJ,MAAQwE,EACbzN,KAAKwQ,cAAgB/C,EACrBzN,KAAKsJ,UAAYmE,EACjBzN,KAAKmL,aAAesC,EACpBzN,KAAK2J,mBAAqB8D,EAC1BzN,KAAKmK,mBAAqBsD,EAC1BzN,KAAKsL,iBAAmBmC,EACxBzN,KAAKqK,aAAeoD,EACpBzN,KAAKoL,iBAAmBqC,EACxBzN,KAAKqL,iBAAmBoC,EACxBzN,KAAKiL,qBAAsB,EAC3BjL,KAAK+P,cAAgBtC,EAErBzN,KAAK0K,eAAiB,CAAC,EACvB1K,KAAK0P,mBAAqB,CAAC,EAE3B1P,KAAKyQ,UAAUT,EACnB,CAIA,SAAAS,CAAUT,GAENjP,OAAOC,OAAOhB,KAAMgQ,GAEhBhQ,KAAKoQ,kBAAoB,GACzBpQ,KAAKoQ,kBAAoBpQ,KAAKkQ,iBAC9BlQ,KAAKiJ,MAAM,+BAA+BjJ,KAAKoQ,qDAAqDpQ,KAAKkQ,2EACzGlQ,KAAKoQ,kBAAoBpQ,KAAKkQ,eAEtC,CASA,QAAAQ,GACI,MAAMC,EAAY,KACV3Q,KAAK2P,OACL3P,KAAKiJ,MAAM,iDAGfjJ,KAAK8P,aAAanK,EAAgBkK,QAClC7P,KAAKmQ,oBAAsBnQ,KAAKkQ,eAChClQ,KAAK4Q,WAAU,EAGf5Q,KAAK4P,QAAUjK,EAAgBkL,cAC/B7Q,KAAKiJ,MAAM,wDACXjJ,KAAK8Q,aAAaC,MAAK,KACnBJ,GAAW,KAIfA,GAER,CACA,cAAMC,GAEF,SADM5Q,KAAKwQ,cAAcxQ,MACrBA,KAAKyP,cAEL,YADAzP,KAAKiJ,MAAM,iEAGf,IAAKjJ,KAAK2P,OAEN,YADA3P,KAAKiJ,MAAM,gEAIXjJ,KAAKiQ,kBAAoB,IAErBjQ,KAAKgR,oBACLC,aAAajR,KAAKgR,oBAEtBhR,KAAKgR,mBAAqBE,YAAW,KAC7BlR,KAAKyI,YAKTzI,KAAKiJ,MAAM,iCAAiCjJ,KAAKiQ,uCACjDjQ,KAAKoN,kBAAiB,GACvBpN,KAAKiQ,oBAEZjQ,KAAKiJ,MAAM,yBAEX,MAAMsE,EAAYvN,KAAKmR,mBACvBnR,KAAKyP,cAAgB,IAAInH,EAAatI,KAAMuN,EAAW,CACnDtE,MAAOjJ,KAAKiJ,MACZwB,cAAezK,KAAKyK,cACpBC,eAAgB1K,KAAK0K,eACrBC,kBAAmB3K,KAAK0P,mBACxB9E,kBAAmB5K,KAAK4K,kBACxBC,kBAAmB7K,KAAK6K,kBACxB8B,kBAAmB3M,KAAK2M,kBACxB7B,iBAAkB9K,KAAK8K,iBACvBC,sBAAuB/K,KAAK+K,sBAC5BC,oBAAqBhL,KAAKgL,oBAC1BC,oBAAqBjL,KAAKiL,oBAC1BrH,4BAA6B5D,KAAK4D,4BAClCsH,8BAA+BlL,KAAKkL,8BACpC5B,UAAWN,IAMP,GAJIhJ,KAAKgR,qBACLC,aAAajR,KAAKgR,oBAClBhR,KAAKgR,wBAAqBnM,IAEzB7E,KAAK2P,OAGN,OAFA3P,KAAKiJ,MAAM,6EACXjJ,KAAKoR,uBAGTpR,KAAKsJ,UAAUN,EAAM,EAEzBmC,aAAcnC,IACVhJ,KAAKmL,aAAanC,EAAM,EAE5BqB,aAAcrB,IACVhJ,KAAKqK,aAAarB,EAAM,EAE5BoC,iBAAkBI,IACdxL,KAAKyP,mBAAgB5K,EACjB7E,KAAK4P,QAAUjK,EAAgBkL,cAE/B7Q,KAAK8P,aAAanK,EAAgB4K,UAItCvQ,KAAKoL,iBAAiBI,GAClBxL,KAAK2P,QACL3P,KAAKqR,qBACT,EAEJhG,iBAAkBG,IACdxL,KAAKqL,iBAAiBG,EAAI,EAE9B7B,mBAAoBxC,IAChBnH,KAAK2J,mBAAmBxC,EAAQ,EAEpCgD,mBAAoBnB,IAChBhJ,KAAKmK,mBAAmBnB,EAAM,EAElCsC,iBAAkBtC,IACdhJ,KAAKsL,iBAAiBtC,EAAM,IAGpChJ,KAAKyP,cAAcrJ,OACvB,CACA,gBAAA+K,GACI,IAAI5D,EACJ,GAAIvN,KAAKsR,iBACL/D,EAAYvN,KAAKsR,uBAEhB,KAAItR,KAAKuR,UAIV,MAAM,IAAIC,MAAM,yDAHhBjE,EAAY,IAAIkE,UAAUzR,KAAKuR,UAAWvR,KAAKyK,cAAc1C,mBAIjE,CAEA,OADAwF,EAAUmE,WAAa,cAChBnE,CACX,CACA,mBAAA8D,GACQrR,KAAKmQ,oBAAsB,IAC3BnQ,KAAKiJ,MAAM,qCAAqCjJ,KAAKmQ,yBACrDnQ,KAAK2R,aAAeT,YAAW,KACvBlR,KAAKqQ,oBAAsBzK,EAAqBgM,cAChD5R,KAAKmQ,oBAAiD,EAA3BnQ,KAAKmQ,oBAED,IAA3BnQ,KAAKoQ,oBACLpQ,KAAKmQ,oBAAsB3D,KAAKqF,IAAI7R,KAAKmQ,oBAAqBnQ,KAAKoQ,qBAG3EpQ,KAAK4Q,UAAU,GAChB5Q,KAAKmQ,qBAEhB,CAwBA,gBAAMW,CAAWgB,EAAU,CAAC,GACxB,MAAMC,EAAQD,EAAQC,QAAS,EACzBC,EAAgBhS,KAAK2P,OAC3B,IAAIsC,EACJ,GAAIjS,KAAK4P,QAAUjK,EAAgB4K,SAE/B,OADAvQ,KAAKiJ,MAAM,wCACJiJ,QAAQC,UAUnB,GARAnS,KAAK8P,aAAanK,EAAgBkL,cAElC7Q,KAAKmQ,oBAAsB,EAEvBnQ,KAAK2R,eACLV,aAAajR,KAAK2R,cAClB3R,KAAK2R,kBAAe9M,IAEpB7E,KAAKyP,eAELzP,KAAKuN,UAAUX,aAAelH,EAAiB0M,OAc/C,OADApS,KAAK8P,aAAanK,EAAgB4K,UAC3B2B,QAAQC,UAdwC,CACvD,MAAME,EAAuBrS,KAAKyP,cAAcrE,iBAEhD6G,EAAa,IAAIC,SAAQ,CAACC,EAASG,KAE/BtS,KAAKyP,cAAcrE,iBAAmBI,IAClC6G,EAAqB7G,GACrB2G,GAAS,CACZ,GAET,CAYA,OANIJ,EACA/R,KAAKyP,eAAevC,mBAEf8E,GACLhS,KAAKoR,uBAEFa,CACX,CAOA,eAAA7E,GACQpN,KAAKyP,eACLzP,KAAKyP,cAAcrC,iBAE3B,CACA,oBAAAgE,GAEQpR,KAAKyP,eACLzP,KAAKyP,cAAclB,SAE3B,CAqCA,OAAAI,CAAQjO,GACJV,KAAKuS,mBAELvS,KAAKyP,cAAcd,QAAQjO,EAC/B,CACA,gBAAA6R,GACI,IAAKvS,KAAKyI,UACN,MAAM,IAAI+J,UAAU,0CAE5B,CAoCA,eAAA/D,CAAgBK,EAAW7E,GACvBjK,KAAKuS,mBAELvS,KAAKyP,cAAchB,gBAAgBK,EAAW7E,EAClD,CAyBA,SAAA8E,CAAUH,EAAa3E,EAAUrJ,EAAU,CAAC,GAGxC,OAFAZ,KAAKuS,mBAEEvS,KAAKyP,cAAcV,UAAUH,EAAa3E,EAAUrJ,EAC/D,CAaA,WAAAoO,CAAYrB,EAAI/M,EAAU,CAAC,GACvBZ,KAAKuS,mBAELvS,KAAKyP,cAAcT,YAAYrB,EAAI/M,EACvC,CAOA,KAAAqO,CAAMC,GAGF,OAFAlP,KAAKuS,mBAEEvS,KAAKyP,cAAcR,MAAMC,EACpC,CAaA,MAAAG,CAAOH,GACHlP,KAAKuS,mBAELvS,KAAKyP,cAAcJ,OAAOH,EAC9B,CAYA,KAAAI,CAAMJ,GACFlP,KAAKuS,mBAELvS,KAAKyP,cAAcH,MAAMJ,EAC7B,CAcA,GAAApF,CAAID,EAAW0F,EAAgB3O,EAAU,CAAC,GACtCZ,KAAKuS,mBAELvS,KAAKyP,cAAc3F,IAAID,EAAW0F,EAAgB3O,EACtD,CAcA,IAAAmJ,CAAKF,EAAW0F,EAAgB3O,EAAU,CAAC,GACvCZ,KAAKuS,mBAELvS,KAAKyP,cAAc1F,KAAKF,EAAW0F,EAAgB3O,EACvD,ECloBG,MAAM6R,GCEN,MAAMC,GCJN,MAAMC,EACT,WAAAlS,CAAYmJ,GACR5J,KAAK4J,OAASA,CAClB,CACA,YAAIgJ,GACA,OAAO5S,KAAK4J,OAAOiB,iBACvB,CACA,YAAI+H,CAASlR,GACT1B,KAAK4J,OAAOiB,kBAAoBnJ,CACpC,CACA,YAAImR,GACA,OAAO7S,KAAK4J,OAAOgB,iBACvB,CACA,YAAIiI,CAASnR,GACT1B,KAAK4J,OAAOgB,kBAAoBlJ,CACpC,ECTG,MAAMoR,UAAqBtD,EAS9B,WAAA/O,CAAY6Q,GACRyB,QAIA/S,KAAKgT,sBAAwB,MAC7BhT,KAAKiT,eAAiB,IAAIN,EAAc3S,MACxCA,KAAKkT,gBAAkB,EACvBlT,KAAKsR,iBAAmBA,EAExBtR,KAAKiJ,MAAQ,IAAI9B,KACb5B,QAAQC,OAAO2B,EAAQ,CAE/B,CACA,aAAAgM,IAAiBC,GACb,IAAIC,EACAC,EACAC,EACA3S,EAAU,CAAC,EACf,GAAIwS,EAAK1Q,OAAS,EACd,MAAM,IAAI8O,MAAM,yCAEpB,GAAuB,mBAAZ4B,EAAK,IACXxS,EAAS0S,EAAiBC,EAAeF,GAAsBD,OAGhE,GACS,IADDA,EAAK1Q,QAGD9B,EAAQ4S,MACR5S,EAAQ6S,SACRH,EACAC,EACAF,EACAzS,EAAQ8S,MACRN,OAIAxS,EAAQ4S,MACR5S,EAAQ6S,SACRH,EACAC,EACAF,GACAD,EAGhB,MAAO,CAACxS,EAAS0S,EAAiBC,EAAeF,EACrD,CA4BA,OAAAM,IAAWP,GACP,MAAM9E,EAAMtO,KAAKmT,iBAAiBC,GAC9B9E,EAAI,KACJtO,KAAK0K,eAAiB4D,EAAI,IAE1BA,EAAI,KACJtO,KAAKsJ,UAAYgF,EAAI,IAErBA,EAAI,KACJtO,KAAKqK,aAAeiE,EAAI,IAExBA,EAAI,KACJtO,KAAKoL,iBAAmBkD,EAAI,IAEhCyE,MAAMrC,UACV,CAYA,UAAAkD,CAAWC,EAAoBjT,EAAU,CAAC,GAClCiT,IACA7T,KAAKmL,aAAe0I,GAExB7T,KAAK2K,kBAAoB/J,EACzBmS,MAAMjC,YACV,CAqBA,IAAAhE,CAAK8B,EAAahO,EAAU,CAAC,EAAGb,EAAO,IAEnC,MAAMe,GAAwD,KAD9DF,EAAUG,OAAOC,OAAO,CAAC,EAAGJ,IACY,kBACpCE,UACOF,EAAQ,kBAEnBZ,KAAK2O,QAAQ,CACTC,cACAhO,QAASA,EACTb,OACAe,2BAER,CAMA,mBAAIoS,CAAgBxR,GAChB1B,KAAKkQ,eAAiBxO,CAC1B,CAMA,MAAIoS,GACA,OAAO9T,KAAKuN,SAChB,CAMA,WAAIpE,GACA,OAAOnJ,KAAKuI,gBAChB,CAMA,aAAIwL,GACA,OAAO/T,KAAK2J,kBAChB,CAMA,aAAIoK,CAAUrS,GACV1B,KAAK2J,mBAAqBjI,CAC9B,CAOA,aAAIsS,GACA,OAAOhU,KAAKmK,kBAChB,CAMA,aAAI6J,CAAUtS,GACV1B,KAAKmK,mBAAqBzI,CAC9B,CAOA,aAAIuS,GACA,OAAOjU,KAAKiT,cAChB,CAOA,aAAIgB,CAAUvS,GACV1B,KAAK4K,kBAAoBlJ,EAAMmR,SAC/B7S,KAAK6K,kBAAoBnJ,EAAMkR,QACnC,ECnOG,MAAMsB,EAeT,aAAOtK,CAAOiC,EAAKsI,GAaE,MAAbA,IACAA,EAAYvM,EAASS,QAAQN,oBAMjC,OAAO,IAAI+K,GAJE,IAEF,IADOoB,EAAME,gBAAkB3C,WACrB5F,EAAKsI,IAG9B,CAsBA,WAAOE,CAAKP,GACR,IAAIQ,EASJ,MARkB,mBAAPR,EACPQ,EAAOR,GAGPvO,QAAQgP,KAAK,qJAEbD,EAAO,IAAMR,GAEV,IAAIhB,EAAawB,EAC5B,EAoBJJ,EAAME,eAAiB,I","sources":["webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/byte.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/frame-impl.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/parser.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/types.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/ticker.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/versions.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/stomp-handler.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/augment-websocket.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/client.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/stomp-config.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/stomp-headers.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/compatibility/heartbeat-info.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/compatibility/compat-client.js","webpack://@patternslib/patternslib/./node_modules/@stomp/stompjs/esm6/compatibility/stomp.js"],"sourcesContent":["/**\n * Some byte values, used as per STOMP specifications.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport const BYTE = {\n    // LINEFEED byte (octet 10)\n    LF: '\\x0A',\n    // NULL byte (octet 0)\n    NULL: '\\x00',\n};\n//# sourceMappingURL=byte.js.map","import { BYTE } from './byte.js';\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\nexport class FrameImpl {\n    /**\n     * body of the frame\n     */\n    get body() {\n        if (!this._body && this.isBinaryBody) {\n            this._body = new TextDecoder().decode(this._binaryBody);\n        }\n        return this._body || '';\n    }\n    /**\n     * body as Uint8Array\n     */\n    get binaryBody() {\n        if (!this._binaryBody && !this.isBinaryBody) {\n            this._binaryBody = new TextEncoder().encode(this._body);\n        }\n        // At this stage it will definitely have a valid value\n        return this._binaryBody;\n    }\n    /**\n     * Frame constructor. `command`, `headers` and `body` are available as properties.\n     *\n     * @internal\n     */\n    constructor(params) {\n        const { command, headers, body, binaryBody, escapeHeaderValues, skipContentLengthHeader, } = params;\n        this.command = command;\n        this.headers = Object.assign({}, headers || {});\n        if (binaryBody) {\n            this._binaryBody = binaryBody;\n            this.isBinaryBody = true;\n        }\n        else {\n            this._body = body || '';\n            this.isBinaryBody = false;\n        }\n        this.escapeHeaderValues = escapeHeaderValues || false;\n        this.skipContentLengthHeader = skipContentLengthHeader || false;\n    }\n    /**\n     * deserialize a STOMP Frame from raw data.\n     *\n     * @internal\n     */\n    static fromRawFrame(rawFrame, escapeHeaderValues) {\n        const headers = {};\n        const trim = (str) => str.replace(/^\\s+|\\s+$/g, '');\n        // In case of repeated headers, as per standards, first value need to be used\n        for (const header of rawFrame.headers.reverse()) {\n            const idx = header.indexOf(':');\n            const key = trim(header[0]);\n            let value = trim(header[1]);\n            if (escapeHeaderValues &&\n                rawFrame.command !== 'CONNECT' &&\n                rawFrame.command !== 'CONNECTED') {\n                value = FrameImpl.hdrValueUnEscape(value);\n            }\n            headers[key] = value;\n        }\n        return new FrameImpl({\n            command: rawFrame.command,\n            headers,\n            binaryBody: rawFrame.binaryBody,\n            escapeHeaderValues,\n        });\n    }\n    /**\n     * @internal\n     */\n    toString() {\n        return this.serializeCmdAndHeaders();\n    }\n    /**\n     * serialize this Frame in a format suitable to be passed to WebSocket.\n     * If the body is string the output will be string.\n     * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n     *\n     * @internal\n     */\n    serialize() {\n        const cmdAndHeaders = this.serializeCmdAndHeaders();\n        if (this.isBinaryBody) {\n            return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n        }\n        else {\n            return cmdAndHeaders + this._body + BYTE.NULL;\n        }\n    }\n    serializeCmdAndHeaders() {\n        const lines = [this.command];\n        if (this.skipContentLengthHeader) {\n            delete this.headers['content-length'];\n        }\n        for (const name of Object.keys(this.headers || {})) {\n            const value = this.headers[name];\n            if (this.escapeHeaderValues &&\n                this.command !== 'CONNECT' &&\n                this.command !== 'CONNECTED') {\n                lines.push(`${name}:${FrameImpl.hdrValueEscape(`${value}`)}`);\n            }\n            else {\n                lines.push(`${name}:${value}`);\n            }\n        }\n        if (this.isBinaryBody ||\n            (!this.isBodyEmpty() && !this.skipContentLengthHeader)) {\n            lines.push(`content-length:${this.bodyLength()}`);\n        }\n        return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n    }\n    isBodyEmpty() {\n        return this.bodyLength() === 0;\n    }\n    bodyLength() {\n        const binaryBody = this.binaryBody;\n        return binaryBody ? binaryBody.length : 0;\n    }\n    /**\n     * Compute the size of a UTF-8 string by counting its number of bytes\n     * (and not the number of characters composing the string)\n     */\n    static sizeOfUTF8(s) {\n        return s ? new TextEncoder().encode(s).length : 0;\n    }\n    static toUnit8Array(cmdAndHeaders, binaryBody) {\n        const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n        const nullTerminator = new Uint8Array([0]);\n        const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n        uint8Frame.set(uint8CmdAndHeaders);\n        uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n        uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n        return uint8Frame;\n    }\n    /**\n     * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n     *\n     * @internal\n     */\n    static marshall(params) {\n        const frame = new FrameImpl(params);\n        return frame.serialize();\n    }\n    /**\n     *  Escape header values\n     */\n    static hdrValueEscape(str) {\n        return str\n            .replace(/\\\\/g, '\\\\\\\\')\n            .replace(/\\r/g, '\\\\r')\n            .replace(/\\n/g, '\\\\n')\n            .replace(/:/g, '\\\\c');\n    }\n    /**\n     * UnEscape header values\n     */\n    static hdrValueUnEscape(str) {\n        return str\n            .replace(/\\\\r/g, '\\r')\n            .replace(/\\\\n/g, '\\n')\n            .replace(/\\\\c/g, ':')\n            .replace(/\\\\\\\\/g, '\\\\');\n    }\n}\n//# sourceMappingURL=frame-impl.js.map","/**\n * @internal\n */\nconst NULL = 0;\n/**\n * @internal\n */\nconst LF = 10;\n/**\n * @internal\n */\nconst CR = 13;\n/**\n * @internal\n */\nconst COLON = 58;\n/**\n * This is an evented, rec descent parser.\n * A stream of Octets can be passed and whenever it recognizes\n * a complete Frame or an incoming ping it will invoke the registered callbacks.\n *\n * All incoming Octets are fed into _onByte function.\n * Depending on current state the _onByte function keeps changing.\n * Depending on the state it keeps accumulating into _token and _results.\n * State is indicated by current value of _onByte, all states are named as _collect.\n *\n * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\n * imply that all lengths are considered in bytes (instead of string lengths).\n * So, before actual parsing, if the incoming data is String it is converted to Octets.\n * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\n *\n * There is no peek function on the incoming data.\n * When a state change occurs based on an Octet without consuming the Octet,\n * the Octet, after state change, is fed again (_reinjectByte).\n * This became possible as the state change can be determined by inspecting just one Octet.\n *\n * There are two modes to collect the body, if content-length header is there then it by counting Octets\n * otherwise it is determined by NULL terminator.\n *\n * Following the standards, the command and headers are converted to Strings\n * and the body is returned as Octets.\n * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\n *\n * This parser does not use Regular Expressions as that can only operate on Strings.\n *\n * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\n * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\n * is pushed.\n *\n * Typically the higher level function will convert headers to Hash, handle unescaping of header values\n * (which is protocol version specific), and convert body to text.\n *\n * Check the parser.spec.js to understand cases that this parser is supposed to handle.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class Parser {\n    constructor(onFrame, onIncomingPing) {\n        this.onFrame = onFrame;\n        this.onIncomingPing = onIncomingPing;\n        this._encoder = new TextEncoder();\n        this._decoder = new TextDecoder();\n        this._token = [];\n        this._initState();\n    }\n    parseChunk(segment, appendMissingNULLonIncoming = false) {\n        let chunk;\n        if (typeof segment === 'string') {\n            chunk = this._encoder.encode(segment);\n        }\n        else {\n            chunk = new Uint8Array(segment);\n        }\n        // See https://github.com/stomp-js/stompjs/issues/89\n        // Remove when underlying issue is fixed.\n        //\n        // Send a NULL byte, if the last byte of a Text frame was not NULL.F\n        if (appendMissingNULLonIncoming && chunk[chunk.length - 1] !== 0) {\n            const chunkWithNull = new Uint8Array(chunk.length + 1);\n            chunkWithNull.set(chunk, 0);\n            chunkWithNull[chunk.length] = 0;\n            chunk = chunkWithNull;\n        }\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < chunk.length; i++) {\n            const byte = chunk[i];\n            this._onByte(byte);\n        }\n    }\n    // The following implements a simple Rec Descent Parser.\n    // The grammar is simple and just one byte tells what should be the next state\n    _collectFrame(byte) {\n        if (byte === NULL) {\n            // Ignore\n            return;\n        }\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            // Incoming Ping\n            this.onIncomingPing();\n            return;\n        }\n        this._onByte = this._collectCommand;\n        this._reinjectByte(byte);\n    }\n    _collectCommand(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.command = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaders(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._setupCollectBody();\n            return;\n        }\n        this._onByte = this._collectHeaderKey;\n        this._reinjectByte(byte);\n    }\n    _reinjectByte(byte) {\n        this._onByte(byte);\n    }\n    _collectHeaderKey(byte) {\n        if (byte === COLON) {\n            this._headerKey = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaderValue;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaderValue(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.headers.push([\n                this._headerKey,\n                this._consumeTokenAsUTF8(),\n            ]);\n            this._headerKey = undefined;\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _setupCollectBody() {\n        const contentLengthHeader = this._results.headers.filter((header) => {\n            return header[0] === 'content-length';\n        })[0];\n        if (contentLengthHeader) {\n            this._bodyBytesRemaining = parseInt(contentLengthHeader[1], 10);\n            this._onByte = this._collectBodyFixedSize;\n        }\n        else {\n            this._onByte = this._collectBodyNullTerminated;\n        }\n    }\n    _collectBodyNullTerminated(byte) {\n        if (byte === NULL) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectBodyFixedSize(byte) {\n        // It is post decrement, so that we discard the trailing NULL octet\n        if (this._bodyBytesRemaining-- === 0) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _retrievedBody() {\n        this._results.binaryBody = this._consumeTokenAsRaw();\n        try {\n            this.onFrame(this._results);\n        }\n        catch (e) {\n            console.log(`Ignoring an exception thrown by a frame handler. Original exception: `, e);\n        }\n        this._initState();\n    }\n    // Rec Descent Parser helpers\n    _consumeByte(byte) {\n        this._token.push(byte);\n    }\n    _consumeTokenAsUTF8() {\n        return this._decoder.decode(this._consumeTokenAsRaw());\n    }\n    _consumeTokenAsRaw() {\n        const rawResult = new Uint8Array(this._token);\n        this._token = [];\n        return rawResult;\n    }\n    _initState() {\n        this._results = {\n            command: undefined,\n            headers: [],\n            binaryBody: undefined,\n        };\n        this._token = [];\n        this._headerKey = undefined;\n        this._onByte = this._collectFrame;\n    }\n}\n//# sourceMappingURL=parser.js.map","/**\n * Possible states for the IStompSocket\n */\nexport var StompSocketState;\n(function (StompSocketState) {\n    StompSocketState[StompSocketState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n    StompSocketState[StompSocketState[\"OPEN\"] = 1] = \"OPEN\";\n    StompSocketState[StompSocketState[\"CLOSING\"] = 2] = \"CLOSING\";\n    StompSocketState[StompSocketState[\"CLOSED\"] = 3] = \"CLOSED\";\n})(StompSocketState || (StompSocketState = {}));\n/**\n * Possible activation state\n */\nexport var ActivationState;\n(function (ActivationState) {\n    ActivationState[ActivationState[\"ACTIVE\"] = 0] = \"ACTIVE\";\n    ActivationState[ActivationState[\"DEACTIVATING\"] = 1] = \"DEACTIVATING\";\n    ActivationState[ActivationState[\"INACTIVE\"] = 2] = \"INACTIVE\";\n})(ActivationState || (ActivationState = {}));\n/**\n * Possible reconnection wait time modes\n */\nexport var ReconnectionTimeMode;\n(function (ReconnectionTimeMode) {\n    ReconnectionTimeMode[ReconnectionTimeMode[\"LINEAR\"] = 0] = \"LINEAR\";\n    ReconnectionTimeMode[ReconnectionTimeMode[\"EXPONENTIAL\"] = 1] = \"EXPONENTIAL\";\n})(ReconnectionTimeMode || (ReconnectionTimeMode = {}));\n/**\n * Possible ticker strategies for outgoing heartbeat ping\n */\nexport var TickerStrategy;\n(function (TickerStrategy) {\n    TickerStrategy[\"Interval\"] = \"interval\";\n    TickerStrategy[\"Worker\"] = \"worker\";\n})(TickerStrategy || (TickerStrategy = {}));\n//# sourceMappingURL=types.js.map","import { TickerStrategy } from './types.js';\nexport class Ticker {\n    constructor(_interval, _strategy = TickerStrategy.Interval, _debug) {\n        this._interval = _interval;\n        this._strategy = _strategy;\n        this._debug = _debug;\n        this._workerScript = `\n    var startTime = Date.now();\n    setInterval(function() {\n        self.postMessage(Date.now() - startTime);\n    }, ${this._interval});\n  `;\n    }\n    start(tick) {\n        this.stop();\n        if (this.shouldUseWorker()) {\n            this.runWorker(tick);\n        }\n        else {\n            this.runInterval(tick);\n        }\n    }\n    stop() {\n        this.disposeWorker();\n        this.disposeInterval();\n    }\n    shouldUseWorker() {\n        return typeof (Worker) !== 'undefined' && this._strategy === TickerStrategy.Worker;\n    }\n    runWorker(tick) {\n        this._debug('Using runWorker for outgoing pings');\n        if (!this._worker) {\n            this._worker = new Worker(URL.createObjectURL(new Blob([this._workerScript], { type: 'text/javascript' })));\n            this._worker.onmessage = (message) => tick(message.data);\n        }\n    }\n    runInterval(tick) {\n        this._debug('Using runInterval for outgoing pings');\n        if (!this._timer) {\n            const startTime = Date.now();\n            this._timer = setInterval(() => {\n                tick(Date.now() - startTime);\n            }, this._interval);\n        }\n    }\n    disposeWorker() {\n        if (this._worker) {\n            this._worker.terminate();\n            delete this._worker;\n            this._debug('Outgoing ping disposeWorker');\n        }\n    }\n    disposeInterval() {\n        if (this._timer) {\n            clearInterval(this._timer);\n            delete this._timer;\n            this._debug('Outgoing ping disposeInterval');\n        }\n    }\n}\n//# sourceMappingURL=ticker.js.map","/**\n * Supported STOMP versions\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Versions {\n    /**\n     * Takes an array of versions, typical elements '1.2', '1.1', or '1.0'\n     *\n     * You will be creating an instance of this class if you want to override\n     * supported versions to be declared during STOMP handshake.\n     */\n    constructor(versions) {\n        this.versions = versions;\n    }\n    /**\n     * Used as part of CONNECT STOMP Frame\n     */\n    supportedVersions() {\n        return this.versions.join(',');\n    }\n    /**\n     * Used while creating a WebSocket\n     */\n    protocolVersions() {\n        return this.versions.map(x => `v${x.replace('.', '')}.stomp`);\n    }\n}\n/**\n * Indicates protocol version 1.0\n */\nVersions.V1_0 = '1.0';\n/**\n * Indicates protocol version 1.1\n */\nVersions.V1_1 = '1.1';\n/**\n * Indicates protocol version 1.2\n */\nVersions.V1_2 = '1.2';\n/**\n * @internal\n */\nVersions.default = new Versions([\n    Versions.V1_2,\n    Versions.V1_1,\n    Versions.V1_0,\n]);\n//# sourceMappingURL=versions.js.map","import { augmentWebsocket } from './augment-websocket.js';\nimport { BYTE } from './byte.js';\nimport { FrameImpl } from './frame-impl.js';\nimport { Parser } from './parser.js';\nimport { Ticker } from './ticker.js';\nimport { StompSocketState, } from './types.js';\nimport { Versions } from './versions.js';\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class StompHandler {\n    get connectedVersion() {\n        return this._connectedVersion;\n    }\n    get connected() {\n        return this._connected;\n    }\n    constructor(_client, _webSocket, config) {\n        this._client = _client;\n        this._webSocket = _webSocket;\n        this._connected = false;\n        this._serverFrameHandlers = {\n            // [CONNECTED Frame](https://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n            CONNECTED: frame => {\n                this.debug(`connected to server ${frame.headers.server}`);\n                this._connected = true;\n                this._connectedVersion = frame.headers.version;\n                // STOMP version 1.2 needs header values to be escaped\n                if (this._connectedVersion === Versions.V1_2) {\n                    this._escapeHeaderValues = true;\n                }\n                this._setupHeartbeat(frame.headers);\n                this.onConnect(frame);\n            },\n            // [MESSAGE Frame](https://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n            MESSAGE: frame => {\n                // the callback is registered when the client calls\n                // `subscribe()`.\n                // If there is no registered subscription for the received message,\n                // the default `onUnhandledMessage` callback is used that the client can set.\n                // This is useful for subscriptions that are automatically created\n                // on the browser side (e.g. [RabbitMQ's temporary\n                // queues](https://www.rabbitmq.com/stomp.html)).\n                const subscription = frame.headers.subscription;\n                const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n                // bless the frame to be a Message\n                const message = frame;\n                const client = this;\n                const messageId = this._connectedVersion === Versions.V1_2\n                    ? message.headers.ack\n                    : message.headers['message-id'];\n                // add `ack()` and `nack()` methods directly to the returned frame\n                // so that a simple call to `message.ack()` can acknowledge the message.\n                message.ack = (headers = {}) => {\n                    return client.ack(messageId, subscription, headers);\n                };\n                message.nack = (headers = {}) => {\n                    return client.nack(messageId, subscription, headers);\n                };\n                onReceive(message);\n            },\n            // [RECEIPT Frame](https://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n            RECEIPT: frame => {\n                const callback = this._receiptWatchers[frame.headers['receipt-id']];\n                if (callback) {\n                    callback(frame);\n                    // Server will acknowledge only once, remove the callback\n                    delete this._receiptWatchers[frame.headers['receipt-id']];\n                }\n                else {\n                    this.onUnhandledReceipt(frame);\n                }\n            },\n            // [ERROR Frame](https://stomp.github.com/stomp-specification-1.2.html#ERROR)\n            ERROR: frame => {\n                this.onStompError(frame);\n            },\n        };\n        // used to index subscribers\n        this._counter = 0;\n        // subscription callbacks indexed by subscriber's ID\n        this._subscriptions = {};\n        // receipt-watchers indexed by receipts-ids\n        this._receiptWatchers = {};\n        this._partialData = '';\n        this._escapeHeaderValues = false;\n        this._lastServerActivityTS = Date.now();\n        this.debug = config.debug;\n        this.stompVersions = config.stompVersions;\n        this.connectHeaders = config.connectHeaders;\n        this.disconnectHeaders = config.disconnectHeaders;\n        this.heartbeatIncoming = config.heartbeatIncoming;\n        this.heartbeatOutgoing = config.heartbeatOutgoing;\n        this.splitLargeFrames = config.splitLargeFrames;\n        this.maxWebSocketChunkSize = config.maxWebSocketChunkSize;\n        this.forceBinaryWSFrames = config.forceBinaryWSFrames;\n        this.logRawCommunication = config.logRawCommunication;\n        this.appendMissingNULLonIncoming = config.appendMissingNULLonIncoming;\n        this.discardWebsocketOnCommFailure = config.discardWebsocketOnCommFailure;\n        this.onConnect = config.onConnect;\n        this.onDisconnect = config.onDisconnect;\n        this.onStompError = config.onStompError;\n        this.onWebSocketClose = config.onWebSocketClose;\n        this.onWebSocketError = config.onWebSocketError;\n        this.onUnhandledMessage = config.onUnhandledMessage;\n        this.onUnhandledReceipt = config.onUnhandledReceipt;\n        this.onUnhandledFrame = config.onUnhandledFrame;\n    }\n    start() {\n        const parser = new Parser(\n        // On Frame\n        rawFrame => {\n            const frame = FrameImpl.fromRawFrame(rawFrame, this._escapeHeaderValues);\n            // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n            if (!this.logRawCommunication) {\n                this.debug(`<<< ${frame}`);\n            }\n            const serverFrameHandler = this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n            serverFrameHandler(frame);\n        }, \n        // On Incoming Ping\n        () => {\n            this.debug('<<< PONG');\n        });\n        this._webSocket.onmessage = (evt) => {\n            this.debug('Received data');\n            this._lastServerActivityTS = Date.now();\n            if (this.logRawCommunication) {\n                const rawChunkAsString = evt.data instanceof ArrayBuffer\n                    ? new TextDecoder().decode(evt.data)\n                    : evt.data;\n                this.debug(`<<< ${rawChunkAsString}`);\n            }\n            parser.parseChunk(evt.data, this.appendMissingNULLonIncoming);\n        };\n        this._webSocket.onclose = (closeEvent) => {\n            this.debug(`Connection closed to ${this._webSocket.url}`);\n            this._cleanUp();\n            this.onWebSocketClose(closeEvent);\n        };\n        this._webSocket.onerror = (errorEvent) => {\n            this.onWebSocketError(errorEvent);\n        };\n        this._webSocket.onopen = () => {\n            // Clone before updating\n            const connectHeaders = Object.assign({}, this.connectHeaders);\n            this.debug('Web Socket Opened...');\n            connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\n            connectHeaders['heart-beat'] = [\n                this.heartbeatOutgoing,\n                this.heartbeatIncoming,\n            ].join(',');\n            this._transmit({ command: 'CONNECT', headers: connectHeaders });\n        };\n    }\n    _setupHeartbeat(headers) {\n        if (headers.version !== Versions.V1_1 &&\n            headers.version !== Versions.V1_2) {\n            return;\n        }\n        // It is valid for the server to not send this header\n        // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n        if (!headers['heart-beat']) {\n            return;\n        }\n        // heart-beat header received from the server looks like:\n        //\n        //     heart-beat: sx, sy\n        const [serverOutgoing, serverIncoming] = headers['heart-beat']\n            .split(',')\n            .map((v) => parseInt(v, 10));\n        if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n            const ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n            this.debug(`send PING every ${ttl}ms`);\n            this._pinger = new Ticker(ttl, this._client.heartbeatStrategy, this.debug);\n            this._pinger.start(() => {\n                if (this._webSocket.readyState === StompSocketState.OPEN) {\n                    this._webSocket.send(BYTE.LF);\n                    this.debug('>>> PING');\n                }\n            });\n        }\n        if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n            const ttl = Math.max(this.heartbeatIncoming, serverOutgoing);\n            this.debug(`check PONG every ${ttl}ms`);\n            this._ponger = setInterval(() => {\n                const delta = Date.now() - this._lastServerActivityTS;\n                // We wait twice the TTL to be flexible on window's setInterval calls\n                if (delta > ttl * 2) {\n                    this.debug(`did not receive server activity for the last ${delta}ms`);\n                    this._closeOrDiscardWebsocket();\n                }\n            }, ttl);\n        }\n    }\n    _closeOrDiscardWebsocket() {\n        if (this.discardWebsocketOnCommFailure) {\n            this.debug('Discarding websocket, the underlying socket may linger for a while');\n            this.discardWebsocket();\n        }\n        else {\n            this.debug('Issuing close on the websocket');\n            this._closeWebsocket();\n        }\n    }\n    forceDisconnect() {\n        if (this._webSocket) {\n            if (this._webSocket.readyState === StompSocketState.CONNECTING ||\n                this._webSocket.readyState === StompSocketState.OPEN) {\n                this._closeOrDiscardWebsocket();\n            }\n        }\n    }\n    _closeWebsocket() {\n        this._webSocket.onmessage = () => { }; // ignore messages\n        this._webSocket.close();\n    }\n    discardWebsocket() {\n        if (typeof this._webSocket.terminate !== 'function') {\n            augmentWebsocket(this._webSocket, (msg) => this.debug(msg));\n        }\n        // @ts-ignore - this method will be there at this stage\n        this._webSocket.terminate();\n    }\n    _transmit(params) {\n        const { command, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const frame = new FrameImpl({\n            command,\n            headers,\n            body,\n            binaryBody,\n            escapeHeaderValues: this._escapeHeaderValues,\n            skipContentLengthHeader,\n        });\n        let rawChunk = frame.serialize();\n        if (this.logRawCommunication) {\n            this.debug(`>>> ${rawChunk}`);\n        }\n        else {\n            this.debug(`>>> ${frame}`);\n        }\n        if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n            rawChunk = new TextEncoder().encode(rawChunk);\n        }\n        if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n            this._webSocket.send(rawChunk);\n        }\n        else {\n            let out = rawChunk;\n            while (out.length > 0) {\n                const chunk = out.substring(0, this.maxWebSocketChunkSize);\n                out = out.substring(this.maxWebSocketChunkSize);\n                this._webSocket.send(chunk);\n                this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\n            }\n        }\n    }\n    dispose() {\n        if (this.connected) {\n            try {\n                // clone before updating\n                const disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n                if (!disconnectHeaders.receipt) {\n                    disconnectHeaders.receipt = `close-${this._counter++}`;\n                }\n                this.watchForReceipt(disconnectHeaders.receipt, frame => {\n                    this._closeWebsocket();\n                    this._cleanUp();\n                    this.onDisconnect(frame);\n                });\n                this._transmit({ command: 'DISCONNECT', headers: disconnectHeaders });\n            }\n            catch (error) {\n                this.debug(`Ignoring error during disconnect ${error}`);\n            }\n        }\n        else {\n            if (this._webSocket.readyState === StompSocketState.CONNECTING ||\n                this._webSocket.readyState === StompSocketState.OPEN) {\n                this._closeWebsocket();\n            }\n        }\n    }\n    _cleanUp() {\n        this._connected = false;\n        if (this._pinger) {\n            this._pinger.stop();\n            this._pinger = undefined;\n        }\n        if (this._ponger) {\n            clearInterval(this._ponger);\n            this._ponger = undefined;\n        }\n    }\n    publish(params) {\n        const { destination, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const hdrs = Object.assign({ destination }, headers);\n        this._transmit({\n            command: 'SEND',\n            headers: hdrs,\n            body,\n            binaryBody,\n            skipContentLengthHeader,\n        });\n    }\n    watchForReceipt(receiptId, callback) {\n        this._receiptWatchers[receiptId] = callback;\n    }\n    subscribe(destination, callback, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (!headers.id) {\n            headers.id = `sub-${this._counter++}`;\n        }\n        headers.destination = destination;\n        this._subscriptions[headers.id] = callback;\n        this._transmit({ command: 'SUBSCRIBE', headers });\n        const client = this;\n        return {\n            id: headers.id,\n            unsubscribe(hdrs) {\n                return client.unsubscribe(headers.id, hdrs);\n            },\n        };\n    }\n    unsubscribe(id, headers = {}) {\n        headers = Object.assign({}, headers);\n        delete this._subscriptions[id];\n        headers.id = id;\n        this._transmit({ command: 'UNSUBSCRIBE', headers });\n    }\n    begin(transactionId) {\n        const txId = transactionId || `tx-${this._counter++}`;\n        this._transmit({\n            command: 'BEGIN',\n            headers: {\n                transaction: txId,\n            },\n        });\n        const client = this;\n        return {\n            id: txId,\n            commit() {\n                client.commit(txId);\n            },\n            abort() {\n                client.abort(txId);\n            },\n        };\n    }\n    commit(transactionId) {\n        this._transmit({\n            command: 'COMMIT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    abort(transactionId) {\n        this._transmit({\n            command: 'ABORT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    ack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        this._transmit({ command: 'ACK', headers });\n    }\n    nack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        return this._transmit({ command: 'NACK', headers });\n    }\n}\n//# sourceMappingURL=stomp-handler.js.map","/**\n * @internal\n */\nexport function augmentWebsocket(webSocket, debug) {\n    webSocket.terminate = function () {\n        const noOp = () => { };\n        // set all callbacks to no op\n        this.onerror = noOp;\n        this.onmessage = noOp;\n        this.onopen = noOp;\n        const ts = new Date();\n        const id = Math.random().toString().substring(2, 8); // A simulated id\n        const origOnClose = this.onclose;\n        // Track delay in actual closure of the socket\n        this.onclose = closeEvent => {\n            const delay = new Date().getTime() - ts.getTime();\n            debug(`Discarded socket (#${id})  closed after ${delay}ms, with code/reason: ${closeEvent.code}/${closeEvent.reason}`);\n        };\n        this.close();\n        origOnClose?.call(webSocket, {\n            code: 4001,\n            reason: `Quick discarding socket (#${id}) without waiting for the shutdown sequence.`,\n            wasClean: false,\n        });\n    };\n}\n//# sourceMappingURL=augment-websocket.js.map","import { StompHandler } from './stomp-handler.js';\nimport { ActivationState, ReconnectionTimeMode, StompSocketState, TickerStrategy, } from './types.js';\nimport { Versions } from './versions.js';\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Client {\n    /**\n     * Underlying WebSocket instance, READONLY.\n     */\n    get webSocket() {\n        return this._stompHandler?._webSocket;\n    }\n    /**\n     * Disconnection headers.\n     */\n    get disconnectHeaders() {\n        return this._disconnectHeaders;\n    }\n    set disconnectHeaders(value) {\n        this._disconnectHeaders = value;\n        if (this._stompHandler) {\n            this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n        }\n    }\n    /**\n     * `true` if there is an active connection to STOMP Broker\n     */\n    get connected() {\n        return !!this._stompHandler && this._stompHandler.connected;\n    }\n    /**\n     * version of STOMP protocol negotiated with the server, READONLY\n     */\n    get connectedVersion() {\n        return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n    }\n    /**\n     * if the client is active (connected or going to reconnect)\n     */\n    get active() {\n        return this.state === ActivationState.ACTIVE;\n    }\n    _changeState(state) {\n        this.state = state;\n        this.onChangeState(state);\n    }\n    /**\n     * Create an instance.\n     */\n    constructor(conf = {}) {\n        /**\n         * STOMP versions to attempt during STOMP handshake. By default, versions `1.2`, `1.1`, and `1.0` are attempted.\n         *\n         * Example:\n         * ```javascript\n         *        // Try only versions 1.1 and 1.0\n         *        client.stompVersions = new Versions(['1.1', '1.0'])\n         * ```\n         */\n        this.stompVersions = Versions.default;\n        /**\n         * Will retry if Stomp connection is not established in specified milliseconds.\n         * Default 0, which switches off automatic reconnection.\n         */\n        this.connectionTimeout = 0;\n        /**\n         *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n         */\n        this.reconnectDelay = 5000;\n        /**\n         * tracking the time to the next reconnection. Initialized to [Client#reconnectDelay]{@link Client#reconnectDelay}'s value and it may\n         * change depending on the [Client#reconnectTimeMode]{@link Client#reconnectTimeMode} setting\n         */\n        this._nextReconnectDelay = 0;\n        /**\n         * Maximum time to wait between reconnects, in milliseconds. Defaults to 15 minutes.\n         * Only relevant when [Client#reconnectTimeMode]{@link Client#reconnectTimeMode} not LINEAR (e.g., EXPONENTIAL).\n         * Set to 0 for no limit on wait time.\n         */\n        this.maxReconnectDelay = 15 * 60 * 1000; // 15 minutes in ms\n        /**\n         * Reconnection wait time mode, either linear (default) or exponential.\n         * Note: See [Client#maxReconnectDelay]{@link Client#maxReconnectDelay} for setting the maximum delay when exponential\n         *\n         * ```javascript\n         * client.configure({\n         *   reconnectTimeMode: ReconnectionTimeMode.EXPONENTIAL,\n         *   reconnectDelay: 200, // It will wait 200, 400, 800 ms...\n         *   maxReconnectDelay: 10000, // Optional, when provided, it will not wait more that these ms\n         * })\n         * ```\n         */\n        this.reconnectTimeMode = ReconnectionTimeMode.LINEAR;\n        /**\n         * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatIncoming = 10000;\n        /**\n         * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatOutgoing = 10000;\n        /**\n         * Outgoing heartbeat strategy.\n         * See https://github.com/stomp-js/stompjs/pull/579\n         *\n         * Can be worker or interval strategy, but will always use `interval`\n         * if web workers are unavailable, for example, in a non-browser environment.\n         *\n         * Using Web Workers may work better on long-running pages\n         * and mobile apps, as the browser may suspend Timers in the main page.\n         * Try the `Worker` mode if you discover disconnects when the browser tab is in the background.\n         *\n         * When used in a JS environment, use 'worker' or 'interval' as valid values.\n         *\n         * Defaults to `interval` strategy.\n         */\n        this.heartbeatStrategy = TickerStrategy.Interval;\n        /**\n         * This switches on a non-standard behavior while sending WebSocket packets.\n         * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n         * Only Java Spring brokers seem to support this mode.\n         *\n         * WebSockets, by itself, split large (text) packets,\n         * so it is not needed with a truly compliant STOMP/WebSocket broker.\n         * Setting it for such a broker will cause large messages to fail.\n         *\n         * `false` by default.\n         *\n         * Binary frames are never split.\n         */\n        this.splitLargeFrames = false;\n        /**\n         * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n         * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n         */\n        this.maxWebSocketChunkSize = 8 * 1024;\n        /**\n         * Usually the\n         * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n         * is automatically decided by type of the payload.\n         * Default is `false`, which should work with all compliant brokers.\n         *\n         * Set this flag to force binary frames.\n         */\n        this.forceBinaryWSFrames = false;\n        /**\n         * A bug in ReactNative chops a string on occurrence of a NULL.\n         * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n         * This makes incoming WebSocket messages invalid STOMP packets.\n         * Setting this flag attempts to reverse the damage by appending a NULL.\n         * If the broker splits a large message into multiple WebSocket messages,\n         * this flag will cause data loss and abnormal termination of connection.\n         *\n         * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n         */\n        this.appendMissingNULLonIncoming = false;\n        /**\n         * Browsers do not immediately close WebSockets when `.close` is issued.\n         * This may cause reconnection to take a significantly long time in case\n         *  of some types of failures.\n         * In case of incoming heartbeat failure, this experimental flag instructs\n         * the library to discard the socket immediately\n         * (even before it is actually closed).\n         */\n        this.discardWebsocketOnCommFailure = false;\n        /**\n         * Activation state.\n         *\n         * It will usually be ACTIVE or INACTIVE.\n         * When deactivating, it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\n         */\n        this.state = ActivationState.INACTIVE;\n        // No op callbacks\n        const noOp = () => { };\n        this.debug = noOp;\n        this.beforeConnect = noOp;\n        this.onConnect = noOp;\n        this.onDisconnect = noOp;\n        this.onUnhandledMessage = noOp;\n        this.onUnhandledReceipt = noOp;\n        this.onUnhandledFrame = noOp;\n        this.onStompError = noOp;\n        this.onWebSocketClose = noOp;\n        this.onWebSocketError = noOp;\n        this.logRawCommunication = false;\n        this.onChangeState = noOp;\n        // These parameters would typically get proper values before connect is called\n        this.connectHeaders = {};\n        this._disconnectHeaders = {};\n        // Apply configuration\n        this.configure(conf);\n    }\n    /**\n     * Update configuration.\n     */\n    configure(conf) {\n        // bulk assign all properties to this\n        Object.assign(this, conf);\n        // Warn on incorrect maxReconnectDelay settings\n        if (this.maxReconnectDelay > 0 &&\n            this.maxReconnectDelay < this.reconnectDelay) {\n            this.debug(`Warning: maxReconnectDelay (${this.maxReconnectDelay}ms) is less than reconnectDelay (${this.reconnectDelay}ms). Using reconnectDelay as the maxReconnectDelay delay.`);\n            this.maxReconnectDelay = this.reconnectDelay;\n        }\n    }\n    /**\n     * Initiate the connection with the broker.\n     * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n     * it will keep trying to reconnect. If the [Client#reconnectTimeMode]{@link Client#reconnectTimeMode}\n     * is set to EXPONENTIAL it will increase the wait time exponentially\n     *\n     * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n     */\n    activate() {\n        const _activate = () => {\n            if (this.active) {\n                this.debug('Already ACTIVE, ignoring request to activate');\n                return;\n            }\n            this._changeState(ActivationState.ACTIVE);\n            this._nextReconnectDelay = this.reconnectDelay;\n            this._connect();\n        };\n        // if it is deactivating, wait for it to complete before activating.\n        if (this.state === ActivationState.DEACTIVATING) {\n            this.debug('Waiting for deactivation to finish before activating');\n            this.deactivate().then(() => {\n                _activate();\n            });\n        }\n        else {\n            _activate();\n        }\n    }\n    async _connect() {\n        await this.beforeConnect(this);\n        if (this._stompHandler) {\n            this.debug('There is already a stompHandler, skipping the call to connect');\n            return;\n        }\n        if (!this.active) {\n            this.debug('Client has been marked inactive, will not attempt to connect');\n            return;\n        }\n        // setup connection watcher\n        if (this.connectionTimeout > 0) {\n            // clear first\n            if (this._connectionWatcher) {\n                clearTimeout(this._connectionWatcher);\n            }\n            this._connectionWatcher = setTimeout(() => {\n                if (this.connected) {\n                    return;\n                }\n                // Connection not established, close the underlying socket\n                // a reconnection will be attempted\n                this.debug(`Connection not established in ${this.connectionTimeout}ms, closing socket`);\n                this.forceDisconnect();\n            }, this.connectionTimeout);\n        }\n        this.debug('Opening Web Socket...');\n        // Get the actual WebSocket (or a similar object)\n        const webSocket = this._createWebSocket();\n        this._stompHandler = new StompHandler(this, webSocket, {\n            debug: this.debug,\n            stompVersions: this.stompVersions,\n            connectHeaders: this.connectHeaders,\n            disconnectHeaders: this._disconnectHeaders,\n            heartbeatIncoming: this.heartbeatIncoming,\n            heartbeatOutgoing: this.heartbeatOutgoing,\n            heartbeatStrategy: this.heartbeatStrategy,\n            splitLargeFrames: this.splitLargeFrames,\n            maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n            forceBinaryWSFrames: this.forceBinaryWSFrames,\n            logRawCommunication: this.logRawCommunication,\n            appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n            discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\n            onConnect: frame => {\n                // Successfully connected, stop the connection watcher\n                if (this._connectionWatcher) {\n                    clearTimeout(this._connectionWatcher);\n                    this._connectionWatcher = undefined;\n                }\n                if (!this.active) {\n                    this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n                    this._disposeStompHandler();\n                    return;\n                }\n                this.onConnect(frame);\n            },\n            onDisconnect: frame => {\n                this.onDisconnect(frame);\n            },\n            onStompError: frame => {\n                this.onStompError(frame);\n            },\n            onWebSocketClose: evt => {\n                this._stompHandler = undefined; // a new one will be created in case of a reconnect\n                if (this.state === ActivationState.DEACTIVATING) {\n                    // Mark deactivation complete\n                    this._changeState(ActivationState.INACTIVE);\n                }\n                // The callback is called before attempting to reconnect, this would allow the client\n                // to be `deactivated` in the callback.\n                this.onWebSocketClose(evt);\n                if (this.active) {\n                    this._schedule_reconnect();\n                }\n            },\n            onWebSocketError: evt => {\n                this.onWebSocketError(evt);\n            },\n            onUnhandledMessage: message => {\n                this.onUnhandledMessage(message);\n            },\n            onUnhandledReceipt: frame => {\n                this.onUnhandledReceipt(frame);\n            },\n            onUnhandledFrame: frame => {\n                this.onUnhandledFrame(frame);\n            },\n        });\n        this._stompHandler.start();\n    }\n    _createWebSocket() {\n        let webSocket;\n        if (this.webSocketFactory) {\n            webSocket = this.webSocketFactory();\n        }\n        else if (this.brokerURL) {\n            webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n        }\n        else {\n            throw new Error('Either brokerURL or webSocketFactory must be provided');\n        }\n        webSocket.binaryType = 'arraybuffer';\n        return webSocket;\n    }\n    _schedule_reconnect() {\n        if (this._nextReconnectDelay > 0) {\n            this.debug(`STOMP: scheduling reconnection in ${this._nextReconnectDelay}ms`);\n            this._reconnector = setTimeout(() => {\n                if (this.reconnectTimeMode === ReconnectionTimeMode.EXPONENTIAL) {\n                    this._nextReconnectDelay = this._nextReconnectDelay * 2;\n                    // Truncated exponential backoff with a set limit unless disabled\n                    if (this.maxReconnectDelay !== 0) {\n                        this._nextReconnectDelay = Math.min(this._nextReconnectDelay, this.maxReconnectDelay);\n                    }\n                }\n                this._connect();\n            }, this._nextReconnectDelay);\n        }\n    }\n    /**\n     * Disconnect if connected and stop auto reconnect loop.\n     * Appropriate callbacks will be invoked if there is an underlying STOMP connection.\n     *\n     * This call is async. It will resolve immediately if there is no underlying active websocket,\n     * otherwise, it will resolve after the underlying websocket is properly disposed of.\n     *\n     * It is not an error to invoke this method more than once.\n     * Each of those would resolve on completion of deactivation.\n     *\n     * To reactivate, you can call [Client#activate]{@link Client#activate}.\n     *\n     * Experimental: pass `force: true` to immediately discard the underlying connection.\n     * This mode will skip both the STOMP and the Websocket shutdown sequences.\n     * In some cases, browsers take a long time in the Websocket shutdown\n     * if the underlying connection had gone stale.\n     * Using this mode can speed up.\n     * When this mode is used, the actual Websocket may linger for a while\n     * and the broker may not realize that the connection is no longer in use.\n     *\n     * It is possible to invoke this method initially without the `force` option\n     * and subsequently, say after a wait, with the `force` option.\n     */\n    async deactivate(options = {}) {\n        const force = options.force || false;\n        const needToDispose = this.active;\n        let retPromise;\n        if (this.state === ActivationState.INACTIVE) {\n            this.debug(`Already INACTIVE, nothing more to do`);\n            return Promise.resolve();\n        }\n        this._changeState(ActivationState.DEACTIVATING);\n        // Reset reconnection timer just to be safe\n        this._nextReconnectDelay = 0;\n        // Clear if a reconnection was scheduled\n        if (this._reconnector) {\n            clearTimeout(this._reconnector);\n            this._reconnector = undefined;\n        }\n        if (this._stompHandler &&\n            // @ts-ignore - if there is a _stompHandler, there is the webSocket\n            this.webSocket.readyState !== StompSocketState.CLOSED) {\n            const origOnWebSocketClose = this._stompHandler.onWebSocketClose;\n            // we need to wait for the underlying websocket to close\n            retPromise = new Promise((resolve, reject) => {\n                // @ts-ignore - there is a _stompHandler\n                this._stompHandler.onWebSocketClose = evt => {\n                    origOnWebSocketClose(evt);\n                    resolve();\n                };\n            });\n        }\n        else {\n            // indicate that auto reconnect loop should terminate\n            this._changeState(ActivationState.INACTIVE);\n            return Promise.resolve();\n        }\n        if (force) {\n            this._stompHandler?.discardWebsocket();\n        }\n        else if (needToDispose) {\n            this._disposeStompHandler();\n        }\n        return retPromise;\n    }\n    /**\n     * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n     * This is different from a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n     * After forcing disconnect, automatic reconnect will be attempted.\n     * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n     */\n    forceDisconnect() {\n        if (this._stompHandler) {\n            this._stompHandler.forceDisconnect();\n        }\n    }\n    _disposeStompHandler() {\n        // Dispose STOMP Handler\n        if (this._stompHandler) {\n            this._stompHandler.dispose();\n        }\n    }\n    /**\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations.\n     *\n     * STOMP protocol specifies and suggests some headers and also allows broker-specific headers.\n     *\n     * `body` must be String.\n     * You will need to covert the payload to string in case it is not string (e.g. JSON).\n     *\n     * To send a binary message body, use `binaryBody` parameter. It should be a\n     * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n     * Sometimes brokers may not support binary frames out of the box.\n     * Please check your broker documentation.\n     *\n     * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n     * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n     * For binary messages, `content-length` header is always added.\n     *\n     * Caution: The broker will, most likely, report an error and disconnect\n     * if the message body has NULL octet(s) and `content-length` header is missing.\n     *\n     * ```javascript\n     *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n     *\n     *        // Only destination is mandatory parameter\n     *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n     *\n     *        // Skip content-length header in the frame to the broker\n     *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n     *\n     *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n     *        // setting content-type header is not mandatory, however a good practice\n     *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n     *                         headers: {'content-type': 'application/octet-stream'}});\n     * ```\n     */\n    publish(params) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.publish(params);\n    }\n    _checkConnection() {\n        if (!this.connected) {\n            throw new TypeError('There is no underlying STOMP connection');\n        }\n    }\n    /**\n     * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n     * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n     * The value (say receipt-id) for this header needs to be unique for each use.\n     * Typically, a sequence, a UUID, a random number or a combination may be used.\n     *\n     * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n     * The operation needs to be matched based on the value of the receipt-id.\n     *\n     * This method allows watching for a receipt and invoking the callback\n     *  when the corresponding receipt has been received.\n     *\n     * The actual {@link IFrame} will be passed as parameter to the callback.\n     *\n     * Example:\n     * ```javascript\n     *        // Subscribing with acknowledgement\n     *        let receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *\n     *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n     *\n     *\n     *        // Publishing with acknowledgement\n     *        receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n     * ```\n     */\n    watchForReceipt(receiptId, callback) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.watchForReceipt(receiptId, callback);\n    }\n    /**\n     * Subscribe to a STOMP Broker location. The callback will be invoked for each\n     * received message with the {@link IMessage} as argument.\n     *\n     * Note: The library will generate a unique ID if there is none provided in the headers.\n     *       To use your own ID, pass it using the `headers` argument.\n     *\n     * ```javascript\n     *        callback = function(message) {\n     *        // called when the client receives a STOMP message from the server\n     *          if (message.body) {\n     *            alert(\"got message with body \" + message.body)\n     *          } else {\n     *            alert(\"got empty message\");\n     *          }\n     *        });\n     *\n     *        var subscription = client.subscribe(\"/queue/test\", callback);\n     *\n     *        // Explicit subscription id\n     *        var mySubId = 'my-subscription-id-001';\n     *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n     * ```\n     */\n    subscribe(destination, callback, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        return this._stompHandler.subscribe(destination, callback, headers);\n    }\n    /**\n     * It is preferable to unsubscribe from a subscription by calling\n     * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n     *\n     * ```javascript\n     *        var subscription = client.subscribe(destination, onmessage);\n     *        // ...\n     *        subscription.unsubscribe();\n     * ```\n     *\n     * See: https://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n     */\n    unsubscribe(id, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.unsubscribe(id, headers);\n    }\n    /**\n     * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n     * and [abort]{@link ITransaction#abort}.\n     *\n     * `transactionId` is optional, if not passed the library will generate it internally.\n     */\n    begin(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        return this._stompHandler.begin(transactionId);\n    }\n    /**\n     * Commit a transaction.\n     *\n     * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.commit();\n     * ```\n     */\n    commit(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.commit(transactionId);\n    }\n    /**\n     * Abort a transaction.\n     * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.abort();\n     * ```\n     */\n    abort(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.abort(transactionId);\n    }\n    /**\n     * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // acknowledge it\n     *          message.ack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    ack(messageId, subscriptionId, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.ack(messageId, subscriptionId, headers);\n    }\n    /**\n     * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // an error occurs, nack it\n     *          message.nack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    nack(messageId, subscriptionId, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.nack(messageId, subscriptionId, headers);\n    }\n}\n//# sourceMappingURL=client.js.map","/**\n * Configuration options for STOMP Client, each key corresponds to\n * field by the same name in {@link Client}. This can be passed to\n * the constructor of {@link Client} or to [Client#configure]{@link Client#configure}.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompConfig {\n}\n//# sourceMappingURL=stomp-config.js.map","/**\n * STOMP headers. Many functions calls will accept headers as parameters.\n * The headers sent by Broker will be available as [IFrame#headers]{@link IFrame#headers}.\n *\n * `key` and `value` must be valid strings.\n * In addition, `key` must not contain `CR`, `LF`, or `:`.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompHeaders {\n}\n//# sourceMappingURL=stomp-headers.js.map","/**\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class HeartbeatInfo {\n    constructor(client) {\n        this.client = client;\n    }\n    get outgoing() {\n        return this.client.heartbeatOutgoing;\n    }\n    set outgoing(value) {\n        this.client.heartbeatOutgoing = value;\n    }\n    get incoming() {\n        return this.client.heartbeatIncoming;\n    }\n    set incoming(value) {\n        this.client.heartbeatIncoming = value;\n    }\n}\n//# sourceMappingURL=heartbeat-info.js.map","import { Client } from '../client.js';\nimport { HeartbeatInfo } from './heartbeat-info.js';\n/**\n * Available for backward compatibility, please shift to using {@link Client}.\n *\n * **Deprecated**\n *\n * Part of `@stomp/stompjs`.\n *\n * To upgrade, please follow the [Upgrade Guide](https://stomp-js.github.io/guide/stompjs/upgrading-stompjs.html)\n */\nexport class CompatClient extends Client {\n    /**\n     * Available for backward compatibility, please shift to using {@link Client}\n     * and [Client#webSocketFactory]{@link Client#webSocketFactory}.\n     *\n     * **Deprecated**\n     *\n     * @internal\n     */\n    constructor(webSocketFactory) {\n        super();\n        /**\n         * It is no op now. No longer needed. Large packets work out of the box.\n         */\n        this.maxWebSocketFrameSize = 16 * 1024;\n        this._heartbeatInfo = new HeartbeatInfo(this);\n        this.reconnect_delay = 0;\n        this.webSocketFactory = webSocketFactory;\n        // Default from previous version\n        this.debug = (...message) => {\n            console.log(...message);\n        };\n    }\n    _parseConnect(...args) {\n        let closeEventCallback;\n        let connectCallback;\n        let errorCallback;\n        let headers = {};\n        if (args.length < 2) {\n            throw new Error('Connect requires at least 2 arguments');\n        }\n        if (typeof args[1] === 'function') {\n            [headers, connectCallback, errorCallback, closeEventCallback] = args;\n        }\n        else {\n            switch (args.length) {\n                case 6:\n                    [\n                        headers.login,\n                        headers.passcode,\n                        connectCallback,\n                        errorCallback,\n                        closeEventCallback,\n                        headers.host,\n                    ] = args;\n                    break;\n                default:\n                    [\n                        headers.login,\n                        headers.passcode,\n                        connectCallback,\n                        errorCallback,\n                        closeEventCallback,\n                    ] = args;\n            }\n        }\n        return [headers, connectCallback, errorCallback, closeEventCallback];\n    }\n    /**\n     * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\n     *\n     * **Deprecated**\n     *\n     * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n     * version with headers to pass your broker specific options.\n     *\n     * overloads:\n     * - connect(headers, connectCallback)\n     * - connect(headers, connectCallback, errorCallback)\n     * - connect(login, passcode, connectCallback)\n     * - connect(login, passcode, connectCallback, errorCallback)\n     * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\n     * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\n     *\n     * params:\n     * - headers, see [Client#connectHeaders]{@link Client#connectHeaders}\n     * - connectCallback, see [Client#onConnect]{@link Client#onConnect}\n     * - errorCallback, see [Client#onStompError]{@link Client#onStompError}\n     * - closeEventCallback, see [Client#onWebSocketClose]{@link Client#onWebSocketClose}\n     * - login [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     * - passcode [String], [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     * - host [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n    connect(...args) {\n        const out = this._parseConnect(...args);\n        if (out[0]) {\n            this.connectHeaders = out[0];\n        }\n        if (out[1]) {\n            this.onConnect = out[1];\n        }\n        if (out[2]) {\n            this.onStompError = out[2];\n        }\n        if (out[3]) {\n            this.onWebSocketClose = out[3];\n        }\n        super.activate();\n    }\n    /**\n     * Available for backward compatibility, please shift to using [Client#deactivate]{@link Client#deactivate}.\n     *\n     * **Deprecated**\n     *\n     * See:\n     * [Client#onDisconnect]{@link Client#onDisconnect}, and\n     * [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n    disconnect(disconnectCallback, headers = {}) {\n        if (disconnectCallback) {\n            this.onDisconnect = disconnectCallback;\n        }\n        this.disconnectHeaders = headers;\n        super.deactivate();\n    }\n    /**\n     * Available for backward compatibility, use [Client#publish]{@link Client#publish}.\n     *\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations. The headers will, typically, be available to the subscriber.\n     * However, there may be special purpose headers corresponding to your STOMP broker.\n     *\n     *  **Deprecated**, use [Client#publish]{@link Client#publish}\n     *\n     * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n     *\n     * ```javascript\n     *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n     *\n     *        // If you want to send a message with a body, you must also pass the headers argument.\n     *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\n     * ```\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n    send(destination, headers = {}, body = '') {\n        headers = Object.assign({}, headers);\n        const skipContentLengthHeader = headers['content-length'] === false;\n        if (skipContentLengthHeader) {\n            delete headers['content-length'];\n        }\n        this.publish({\n            destination,\n            headers: headers,\n            body,\n            skipContentLengthHeader,\n        });\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#reconnectDelay]{@link Client#reconnectDelay}.\n     *\n     * **Deprecated**\n     */\n    set reconnect_delay(value) {\n        this.reconnectDelay = value;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#webSocket]{@link Client#webSocket}.\n     *\n     * **Deprecated**\n     */\n    get ws() {\n        return this.webSocket;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#connectedVersion]{@link Client#connectedVersion}.\n     *\n     * **Deprecated**\n     */\n    get version() {\n        return this.connectedVersion;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n     *\n     * **Deprecated**\n     */\n    get onreceive() {\n        return this.onUnhandledMessage;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n     *\n     * **Deprecated**\n     */\n    set onreceive(value) {\n        this.onUnhandledMessage = value;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n     * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}.\n     *\n     * **Deprecated**\n     */\n    get onreceipt() {\n        return this.onUnhandledReceipt;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n     *\n     * **Deprecated**\n     */\n    set onreceipt(value) {\n        this.onUnhandledReceipt = value;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n     * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n     *\n     * **Deprecated**\n     */\n    get heartbeat() {\n        return this._heartbeatInfo;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n     * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n     *\n     * **Deprecated**\n     */\n    set heartbeat(value) {\n        this.heartbeatIncoming = value.incoming;\n        this.heartbeatOutgoing = value.outgoing;\n    }\n}\n//# sourceMappingURL=compat-client.js.map","import { Versions } from '../versions.js';\nimport { CompatClient } from './compat-client.js';\n/**\n * STOMP Class, acts like a factory to create {@link Client}.\n *\n * Part of `@stomp/stompjs`.\n *\n * **Deprecated**\n *\n * It will be removed in next major version. Please switch to {@link Client}.\n */\nexport class Stomp {\n    /**\n     * This method creates a WebSocket client that is connected to\n     * the STOMP server located at the url.\n     *\n     * ```javascript\n     *        var url = \"ws://localhost:61614/stomp\";\n     *        var client = Stomp.client(url);\n     * ```\n     *\n     * **Deprecated**\n     *\n     * It will be removed in next major version. Please switch to {@link Client}\n     * using [Client#brokerURL]{@link Client#brokerURL}.\n     */\n    static client(url, protocols) {\n        // This is a hack to allow another implementation than the standard\n        // HTML5 WebSocket class.\n        //\n        // It is possible to use another class by calling\n        //\n        //     Stomp.WebSocketClass = MozWebSocket\n        //\n        // *prior* to call `Stomp.client()`.\n        //\n        // This hack is deprecated and `Stomp.over()` method should be used\n        // instead.\n        // See remarks on the function Stomp.over\n        if (protocols == null) {\n            protocols = Versions.default.protocolVersions();\n        }\n        const wsFn = () => {\n            const klass = Stomp.WebSocketClass || WebSocket;\n            return new klass(url, protocols);\n        };\n        return new CompatClient(wsFn);\n    }\n    /**\n     * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n     * specify the WebSocket to use (either a standard HTML5 WebSocket or\n     * a similar object).\n     *\n     * In order to support reconnection, the function Client._connect should be callable more than once.\n     * While reconnecting\n     * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n     * alternatively allows passing a function that should return a new instance of the underlying socket.\n     *\n     * ```javascript\n     *        var client = Stomp.over(function(){\n     *          return new WebSocket('ws://localhost:15674/ws')\n     *        });\n     * ```\n     *\n     * **Deprecated**\n     *\n     * It will be removed in next major version. Please switch to {@link Client}\n     * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n     */\n    static over(ws) {\n        let wsFn;\n        if (typeof ws === 'function') {\n            wsFn = ws;\n        }\n        else {\n            console.warn('Stomp.over did not receive a factory, auto reconnect will not work. ' +\n                'Please see https://stomp-js.github.io/api-docs/latest/classes/Stomp.html#over');\n            wsFn = () => ws;\n        }\n        return new CompatClient(wsFn);\n    }\n}\n/**\n * In case you need to use a non standard class for WebSocket.\n *\n * For example when using within NodeJS environment:\n *\n * ```javascript\n *        StompJs = require('../../esm5/');\n *        Stomp = StompJs.Stomp;\n *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n * ```\n *\n * **Deprecated**\n *\n *\n * It will be removed in next major version. Please switch to {@link Client}\n * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n */\n// tslint:disable-next-line:variable-name\nStomp.WebSocketClass = null;\n//# sourceMappingURL=stomp.js.map"],"names":["BYTE","FrameImpl","body","this","_body","isBinaryBody","TextDecoder","decode","_binaryBody","binaryBody","TextEncoder","encode","constructor","params","command","headers","escapeHeaderValues","skipContentLengthHeader","Object","assign","fromRawFrame","rawFrame","trim","str","replace","header","reverse","indexOf","key","value","hdrValueUnEscape","toString","serializeCmdAndHeaders","serialize","cmdAndHeaders","toUnit8Array","buffer","lines","name","keys","push","hdrValueEscape","isBodyEmpty","bodyLength","join","length","sizeOfUTF8","s","uint8CmdAndHeaders","nullTerminator","Uint8Array","uint8Frame","set","marshall","Parser","onFrame","onIncomingPing","_encoder","_decoder","_token","_initState","parseChunk","segment","appendMissingNULLonIncoming","chunk","chunkWithNull","i","byte","_onByte","_collectFrame","_collectCommand","_reinjectByte","_results","_consumeTokenAsUTF8","_collectHeaders","_consumeByte","_collectHeaderKey","_setupCollectBody","_headerKey","_collectHeaderValue","undefined","contentLengthHeader","filter","_bodyBytesRemaining","parseInt","_collectBodyFixedSize","_collectBodyNullTerminated","_retrievedBody","_consumeTokenAsRaw","e","console","log","rawResult","StompSocketState","ActivationState","ReconnectionTimeMode","TickerStrategy","Ticker","_interval","_strategy","Interval","_debug","_workerScript","start","tick","stop","shouldUseWorker","runWorker","runInterval","disposeWorker","disposeInterval","Worker","_worker","URL","createObjectURL","Blob","type","onmessage","message","data","_timer","startTime","Date","now","setInterval","terminate","clearInterval","Versions","versions","supportedVersions","protocolVersions","map","x","V1_0","V1_1","V1_2","default","StompHandler","connectedVersion","_connectedVersion","connected","_connected","_client","_webSocket","config","_serverFrameHandlers","CONNECTED","frame","debug","server","version","_escapeHeaderValues","_setupHeartbeat","onConnect","MESSAGE","subscription","onReceive","_subscriptions","onUnhandledMessage","client","messageId","ack","nack","RECEIPT","callback","_receiptWatchers","onUnhandledReceipt","ERROR","onStompError","_counter","_partialData","_lastServerActivityTS","stompVersions","connectHeaders","disconnectHeaders","heartbeatIncoming","heartbeatOutgoing","splitLargeFrames","maxWebSocketChunkSize","forceBinaryWSFrames","logRawCommunication","discardWebsocketOnCommFailure","onDisconnect","onWebSocketClose","onWebSocketError","onUnhandledFrame","parser","evt","rawChunkAsString","ArrayBuffer","onclose","closeEvent","url","_cleanUp","onerror","errorEvent","onopen","_transmit","serverOutgoing","serverIncoming","split","v","ttl","Math","max","_pinger","heartbeatStrategy","readyState","OPEN","send","_ponger","delta","_closeOrDiscardWebsocket","discardWebsocket","_closeWebsocket","forceDisconnect","CONNECTING","close","webSocket","msg","noOp","ts","id","random","substring","origOnClose","delay","getTime","code","reason","call","wasClean","rawChunk","out","dispose","receipt","watchForReceipt","error","publish","destination","hdrs","receiptId","subscribe","unsubscribe","begin","transactionId","txId","transaction","commit","abort","subscriptionId","Client","_stompHandler","_disconnectHeaders","active","state","ACTIVE","_changeState","onChangeState","conf","connectionTimeout","reconnectDelay","_nextReconnectDelay","maxReconnectDelay","reconnectTimeMode","LINEAR","INACTIVE","beforeConnect","configure","activate","_activate","_connect","DEACTIVATING","deactivate","then","_connectionWatcher","clearTimeout","setTimeout","_createWebSocket","_disposeStompHandler","_schedule_reconnect","webSocketFactory","brokerURL","Error","WebSocket","binaryType","_reconnector","EXPONENTIAL","min","options","force","needToDispose","retPromise","Promise","resolve","CLOSED","origOnWebSocketClose","reject","_checkConnection","TypeError","StompConfig","StompHeaders","HeartbeatInfo","outgoing","incoming","CompatClient","super","maxWebSocketFrameSize","_heartbeatInfo","reconnect_delay","_parseConnect","args","closeEventCallback","connectCallback","errorCallback","login","passcode","host","connect","disconnect","disconnectCallback","ws","onreceive","onreceipt","heartbeat","Stomp","protocols","WebSocketClass","over","wsFn","warn"],"sourceRoot":""}